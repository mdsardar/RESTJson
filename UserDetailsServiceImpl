/**
 * 
 */


import java.util.Collection;
import java.util.HashSet;
import java.util.List;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.core.GrantedAuthority;
import org.springframework.security.core.authority.SimpleGrantedAuthority;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.core.userdetails.UsernameNotFoundException;
import org.springframework.stereotype.Service;

import com.citigroup.amlcdd.common.constants.EntitlementStatusEnum;
import com.citigroup.amlcdd.entitlement.vo.UserProfileInfoVO;
import com.citigroup.amlcdd.framework.context.UserContext;
import com.citigroup.amlcdd.login.dao.CDDUserDetailsDao;


/**
 * @author nb37530
 *
 */
@Service("userDetailsService")
public class UserDetailsServiceImpl implements UserDetailsService {

	private final Logger logger = LoggerFactory.getLogger(UserDetailsServiceImpl.class);
	
	@Autowired
	CDDUserDetailsDao cddUserDetailDao;
	
	@Autowired
	IUserLogService userLogService;

	/* (non-Javadoc)
	 * @see org.springframework.security.core.userdetails.UserDetailsService#loadUserByUsername(java.lang.String)
	 */
	@Override
	public UserDetails loadUserByUsername(String authString) throws UsernameNotFoundException {
		logger.info("Inside loadUserByUsername() to fetch user details for Login & Entitlement ");
		
		logger.info("UserID got from filter :"+authString);		
		String[] array=authString.split("#");
		
		//HttpServletRequest request = ((ServletRequestAttributes) RequestContextHolder.currentRequestAttributes()).getRequest();
        String country = array[1];
        String userId=array[0];
		UserProfileInfoVO userProfile = cddUserDetailDao.getUserDetailsById(userId, country);
		if(null == userProfile){
			if(logger.isInfoEnabled()){
				logger.info("User doesn't have entitlement : "+userId);
			}
			if(userId == null || (userId != null && userId.isEmpty())){
				userId = "anonymous";
			}
			UserContext user = new UserContext(userId, "", new HashSet<GrantedAuthority>());
        	user.setErrMessage("User Not Found in the System");
        	user.setKycCountryCode(country);
        	userLogService.logUserActivity(user, EntitlementStatusEnum.LOGIN.getVal(), false);
        	user = null;
			return null;
		}
		Collection<GrantedAuthority> grantedAuthorities = new HashSet<>();
		List<String> sysRoles = userProfile.getSystemRoles();
		if(null != sysRoles && sysRoles.size() > 0){
			for(String role : userProfile.getSystemRoles()){
				GrantedAuthority grantedAuthority = new SimpleGrantedAuthority(role);
				grantedAuthorities.add(grantedAuthority); 
			}
		}
		grantedAuthorities.add(new SimpleGrantedAuthority(userProfile.getBusinessRole())); 
		List<String> funList = userProfile.getFunctionList();
		if(null != funList && funList.size() > 0){
			for (String authority : funList) { 
				GrantedAuthority grantedAuthority = new SimpleGrantedAuthority(authority);
				grantedAuthorities.add(grantedAuthority); 
			}
		}
		/* Granted this authority "CDDUSER" for Spring security configuration only
		 * Should not be used for authorization anywhere else in the application
		 * Scope is for the session, not persisted
		 *  */
		grantedAuthorities.add(new SimpleGrantedAuthority("CDDUSER"));
		
		UserContext userContext = new UserContext(userProfile.getUserId(), "",userProfile.isAccountEnabled(), true, true, true,
				grantedAuthorities);
		/*UserContext userContext = new UserContext(userProfile.getUserId(), "",grantedAuthorities);*/
		userContext = mapToUserContext(userProfile, userContext);
		logger.info("*************************************** Authenticated User information - Starts ************");
		logger.info(userContext.toString());
		logger.info("*************************************** Authenticated User information - Ends ************");
		
		logger.info("Log User activity..");
		userLogService.logUserActivity(userContext,EntitlementStatusEnum.LOGIN.getVal(), false);
		
		logger.info("loadUserByUsername() method execution Ends");
		
		return userContext;
	}

	private UserContext mapToUserContext(UserProfileInfoVO userProfile, UserContext userContext) {
		userContext.setUserId(userProfile.getUserId());
		userContext.setUserName(userProfile.getUserName());
		userContext.setRoleId(userProfile.getBusinessRole());
		userContext.setRoleDescription(userProfile.getBusinessRoleDesc());
		userContext.setDefaultLanguage(userProfile.getDefaultLocale().toUpperCase());
		userContext.setSystemRoles(userProfile.getSystemRoles());
		userContext.setCountryCode(userProfile.getCountryCode());
		userContext.setKycCountryCode(userProfile.getKycCountryCode());
		return userContext;
	}
	
}
