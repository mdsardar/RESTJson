import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.stream.Collectors;

import org.slf4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.ModelAndView;

import com.citigroup.amlcdd.common.constants.AMLCDDConstants;
import com.citigroup.amlcdd.forms.questions.util.NonFormErrorMessageRenderUtil;
import com.citigroup.amlcdd.framework.context.UserContext;
import com.citigroup.amlcdd.framework.util.CommonUtility;
import com.citigroup.amlcdd.framework.vo.PickListLkUpVO;
import com.citigroup.amlcdd.framework.webapp.BaseController;
import com.citigroup.amlcdd.risk.country.service.ICountryRiskOverrideService;
import com.citigroup.amlcdd.risk.country.vo.CountryRiskOverrideVO;

/**
 * Class to <Details>
 */
@Controller
@RequestMapping("/countryRiskOverride")
public class CountryRiskOverrideController extends BaseController {
	
	@Autowired
	ICountryRiskOverrideService countryRiskOverrideService;
	
	@Autowired
	private NonFormErrorMessageRenderUtil nonFormErrorMessageRenderUtil;
	private static final Logger logger = org.slf4j.LoggerFactory.getLogger(CountryRiskOverrideController.class);
	

	/**
	 * Method Name: initCountryRiskOverrideDetails
	 * Description: Method to display data on load
	 * @return ModelAndView
	 * @param 
	 * 
	 */
	@RequestMapping("/init")
	public ModelAndView initCountryRiskOverrideDetails(Map<String, Object> model) {
		logger.info("Inside the Class: CountryRiskOverrideController ---> method: initCountryRiskOverrideDetails");
		ModelAndView mav = new ModelAndView("/countryRiskOverride/countryRiskOverride");
		 mav = getCountryRiskOverrideDetails(mav, model);
		 logger.info("Exits the Class: CountryRiskOverrideController ---> method: initCountryRiskOverrideDetails");
		return mav;
		
	}
	
	/**
	 * Method Name: getCountryRiskOverrideDetails
	 * Description: Method to perform <Details>
	 * @return ModelAndView
	 * @param 
	 * 
	 */
	private ModelAndView getCountryRiskOverrideDetails(ModelAndView mav, Map<String, Object> model)
	{
		logger.info("Inside the Class: CountryRiskOverrideController ---> method: getCountryRiskOverrideDetails");
		List<CountryRiskOverrideVO> initialMakerDataList = null;
		List<CountryRiskOverrideVO> initMakerRiskScoreList = null;
		Map<String, String> userMap = null;
		try{
		userMap = countryRiskOverrideService.getAllUsers();
		
		initialMakerDataList = countryRiskOverrideService.getInitialModifiedMakerData(userMap);
		initMakerRiskScoreList = countryRiskOverrideService.getInitMakerRiskScoreData(userMap);
	//	Map<String, List<PickListLkUpVO>> pickListMap= getPickList(Arrays.asList(AMLCDDConstants.COUNTRY_OVRRIDE_PICK_LIST_TYPES));
		Map<String, List<PickListLkUpVO>> pickListMap= countryRiskOverrideService.getOnLoadPickListLkupData(Arrays.asList(AMLCDDConstants.COUNTRY_OVRRIDE_PICK_LIST_TYPES));
		List<CountryRiskOverrideVO> modeOfAccountOpenVOList = getModeOfAccountVOList(pickListMap, initialMakerDataList, userMap);
		List<CountryRiskOverrideVO> docTypeVOList = getDocumentTypeVOList(pickListMap,initialMakerDataList, userMap);
		List<CountryRiskOverrideVO> retailVOList = getRetailVOList(pickListMap,initialMakerDataList, userMap);
		List<CountryRiskOverrideVO> cardVOList = getCardVOList(pickListMap,initialMakerDataList, userMap);
		List<CountryRiskOverrideVO> uplVOList = getUPLVOList(pickListMap,initialMakerDataList, userMap);
		List<CountryRiskOverrideVO> accountOpenVOList = new ArrayList<>();
		List<CountryRiskOverrideVO> docVOList = new ArrayList<>();
		List<CountryRiskOverrideVO> ageRetailVOList = new ArrayList<>();
		List<CountryRiskOverrideVO> ageCardVOList = new ArrayList<>();
		List<CountryRiskOverrideVO> ageUPLVOList = new ArrayList<>();
		
		for(CountryRiskOverrideVO countryRiskOverrideVO:modeOfAccountOpenVOList){
			for(CountryRiskOverrideVO checkerRiskScore:initMakerRiskScoreList){
				if(CommonUtility.isNotNull(countryRiskOverrideVO.getPickListType()) && CommonUtility.isNotNull(countryRiskOverrideVO.getModeOfAccountOpening())){
				if((countryRiskOverrideVO.getPickListType().equals(checkerRiskScore.getPickListType())) && (countryRiskOverrideVO.getModeOfAccountOpening().equals(checkerRiskScore.getPickListCode()))){
					countryRiskOverrideVO.setRiskScore(checkerRiskScore.getRiskScore());
				countryRiskOverrideVO.setCreateDate(checkerRiskScore.getCreateDate());
				if(CommonUtility.isNotNull(userMap.get(checkerRiskScore.getCreateId())))
					countryRiskOverrideVO.setCreatedBy(userMap.get(checkerRiskScore.getCreateId()));
					else
						countryRiskOverrideVO.setCreatedBy(checkerRiskScore.getCreateId());	
				accountOpenVOList.add(countryRiskOverrideVO);
				}
				}
			}
		}
		
		for(CountryRiskOverrideVO countryRiskOverrideVO:docTypeVOList){
			for(CountryRiskOverrideVO checkerRiskScore:initMakerRiskScoreList){
				if(CommonUtility.isNotNull(countryRiskOverrideVO.getPickListType()) && CommonUtility.isNotNull(countryRiskOverrideVO.getIdType())){
				if((countryRiskOverrideVO.getPickListType().equals(checkerRiskScore.getPickListType())) && (countryRiskOverrideVO.getIdType().equals(checkerRiskScore.getPickListCode()))){
					countryRiskOverrideVO.setRiskScore(checkerRiskScore.getRiskScore());
				countryRiskOverrideVO.setCreateDate(checkerRiskScore.getCreateDate());
				if(CommonUtility.isNotNull(userMap.get(checkerRiskScore.getCreateId())))
					countryRiskOverrideVO.setCreatedBy(userMap.get(checkerRiskScore.getCreateId()));
					else
						countryRiskOverrideVO.setCreatedBy(checkerRiskScore.getCreateId());	
				docVOList.add(countryRiskOverrideVO);
				}
			}
			}
		}
		
		for(CountryRiskOverrideVO countryRiskOverrideVO:retailVOList){
			for(CountryRiskOverrideVO checkerRiskScore:initMakerRiskScoreList){
				if(CommonUtility.isNotNull(countryRiskOverrideVO.getParentPickListType()) && CommonUtility.isNotNull(countryRiskOverrideVO.getParentPickListCode())){
				if((countryRiskOverrideVO.getParentPickListType().equals(checkerRiskScore.getPickListType())) && ((countryRiskOverrideVO.getParentPickListCode().trim()).equals(checkerRiskScore.getPickListCode().trim()))){
					countryRiskOverrideVO.setRiskScore(checkerRiskScore.getRiskScore());
				countryRiskOverrideVO.setCreateDate(checkerRiskScore.getCreateDate());
				if(CommonUtility.isNotNull(userMap.get(checkerRiskScore.getCreateId())))
					countryRiskOverrideVO.setCreatedBy(userMap.get(checkerRiskScore.getCreateId()));
					else
						countryRiskOverrideVO.setCreatedBy(checkerRiskScore.getCreateId());	
				ageRetailVOList.add(countryRiskOverrideVO);
				}
				}
				
			}
		}
		for(CountryRiskOverrideVO countryRiskOverrideVO:cardVOList){
			for(CountryRiskOverrideVO checkerRiskScore:initMakerRiskScoreList){
				if(CommonUtility.isNotNull(countryRiskOverrideVO.getParentPickListType()) && CommonUtility.isNotNull(countryRiskOverrideVO.getParentPickListCode())){
				if((countryRiskOverrideVO.getParentPickListType().equals(checkerRiskScore.getPickListType())) && (countryRiskOverrideVO.getParentPickListCode().equals(checkerRiskScore.getPickListCode()))){
					countryRiskOverrideVO.setRiskScore(checkerRiskScore.getRiskScore());
				countryRiskOverrideVO.setCreateDate(checkerRiskScore.getCreateDate());
				if(CommonUtility.isNotNull(userMap.get(checkerRiskScore.getCreateId())))
					countryRiskOverrideVO.setCreatedBy(userMap.get(checkerRiskScore.getCreateId()));
					else
						countryRiskOverrideVO.setCreatedBy(checkerRiskScore.getCreateId());	
				ageCardVOList.add(countryRiskOverrideVO);
				}
				}
				
			}
		}
		for(CountryRiskOverrideVO countryRiskOverrideVO:uplVOList){
			for(CountryRiskOverrideVO checkerRiskScore:initMakerRiskScoreList){
				if(CommonUtility.isNotNull(countryRiskOverrideVO.getParentPickListType()) && CommonUtility.isNotNull(countryRiskOverrideVO.getParentPickListCode())){
				if((countryRiskOverrideVO.getParentPickListType().equals(checkerRiskScore.getPickListType())) && (countryRiskOverrideVO.getParentPickListCode().equals(checkerRiskScore.getPickListCode()))){
					countryRiskOverrideVO.setRiskScore(checkerRiskScore.getRiskScore());
				countryRiskOverrideVO.setCreateDate(checkerRiskScore.getCreateDate());
				if(CommonUtility.isNotNull(userMap.get(checkerRiskScore.getCreateId())))
					countryRiskOverrideVO.setCreatedBy(userMap.get(checkerRiskScore.getCreateId()));
					else
						countryRiskOverrideVO.setCreatedBy(checkerRiskScore.getCreateId());	
				ageUPLVOList.add(countryRiskOverrideVO);
				}
				}
				
			}
		}
		
		for(CountryRiskOverrideVO countryRiskOverrideVO:initialMakerDataList){
			if(AMLCDDConstants.PBOC_RISK_SCORE_MODE_OF_ACCT_CARD.equals(countryRiskOverrideVO.getPickListType()) && AMLCDDConstants.ADD_PENDING.equals(countryRiskOverrideVO.getAuthStatus())){
				countryRiskOverrideVO.setModifiedRiskScore("");
				countryRiskOverrideVO.setModifiedWorkflowStatus(countryRiskOverrideVO.getAuthStatus());
				accountOpenVOList.add(countryRiskOverrideVO);
			}
			else if(AMLCDDConstants.PBOC_RISK_SCORE_IND_ID_TYPE.equals(countryRiskOverrideVO.getPickListType()) && AMLCDDConstants.ADD_PENDING.equals(countryRiskOverrideVO.getAuthStatus())){
				countryRiskOverrideVO.setModifiedRiskScore("");
				countryRiskOverrideVO.setModifiedWorkflowStatus(countryRiskOverrideVO.getAuthStatus());
				docVOList.add(countryRiskOverrideVO);
			}
			else if(AMLCDDConstants.PBOC_RISK_SCORE_AGE_RETAIL_PARAMS.equals(countryRiskOverrideVO.getPickListType()) && AMLCDDConstants.ADD_PENDING.equals(countryRiskOverrideVO.getAuthStatus())){
				countryRiskOverrideVO.setModifiedRiskScore("");
				countryRiskOverrideVO.setModifiedWorkflowStatus(countryRiskOverrideVO.getAuthStatus());
				ageRetailVOList.add(countryRiskOverrideVO);
			}
			else if(AMLCDDConstants.PBOC_RISK_SCORE_AGE_CARD_PARAMS.equals(countryRiskOverrideVO.getPickListType()) && AMLCDDConstants.ADD_PENDING.equals(countryRiskOverrideVO.getAuthStatus())){
				countryRiskOverrideVO.setModifiedRiskScore("");
				countryRiskOverrideVO.setModifiedWorkflowStatus(countryRiskOverrideVO.getAuthStatus());
				ageCardVOList.add(countryRiskOverrideVO);
			}
			else if(AMLCDDConstants.PBOC_RISK_SCORE_AGE_UPL_PARAMS.equals(countryRiskOverrideVO.getPickListType()) && AMLCDDConstants.ADD_PENDING.equals(countryRiskOverrideVO.getAuthStatus())){
				countryRiskOverrideVO.setModifiedRiskScore("");
				countryRiskOverrideVO.setModifiedWorkflowStatus(countryRiskOverrideVO.getAuthStatus());
				ageUPLVOList.add(countryRiskOverrideVO);
			}
		}
		 model.put(AMLCDDConstants.COUNTRY_RISK_OVERRIDE, super.getUiLabels(AMLCDDConstants.COUNTRY_RISK_OVERRIDE));
		 model.put(AMLCDDConstants.SYS_OVRRIDE_PICK_LIST_TYPE, pickListMap);
		 model.put(AMLCDDConstants.COMMON, getUiLabels(AMLCDDConstants.COMMON));
		 model.put(AMLCDDConstants.SYSTEM_OVERRIDE_CONFIGURATION, super.getPickList(Arrays.asList(AMLCDDConstants.PICK_LST_TYPES)));
		 model.put("uiLabels", getUiLabels(AMLCDDConstants.TRIGGER_REFRESH_RULES_CONFIG));
		 mav.addObject("modeOfAccountOpenVOList", accountOpenVOList);
		 mav.addObject("docTypeVOList", docVOList);
		 mav.addObject("cardVOList", ageCardVOList);
		 mav.addObject("retailVOList", ageRetailVOList);
		 mav.addObject("uplVOList", ageUPLVOList);
		 mav.addObject("initialMakerDataList", initialMakerDataList);
		
		}
		catch (Exception e) {
			logger.error("Error on  getCountryRiskOverrideDetails: "+e.getMessage());
		}
	
		 logger.info("Inside the Class: CountryRiskOverrideController ---> method: getCountryRiskOverrideDetails");
		 return mav;
	}
	
	/**
	 * Method Name: initCountryCheckerOverrideDetails
	 * Description: Method to perform <Details>
	 * @return ModelAndView
	 * @param 
	 * 
	 */
	@RequestMapping("/checker")
	public ModelAndView initCountryCheckerOverrideDetails(Map<String, Object> model, @RequestParam("paramId") String pickListId, @RequestParam("paramName") String pickListType) {
		logger.info("Inside the Class: CountryRiskOverrideController ---> method: initCountryCheckerOverrideDetails");
		ModelAndView mav = new ModelAndView("/countryRiskOverride/countryRiskOverrideChecker");
		Map<String, String> map = countryRiskOverrideService.getAllUsers();
		String assineeValidationFlg=null;
		String assigneeName=countryRiskOverrideService.getParameterAssigneeName(pickListId);
		List<String> systemRoles= getUserContext().getSystemRoles();
		if(assigneeName!=null && assigneeName.equalsIgnoreCase(getUserContext().getUserId()) && 
				systemRoles!=null && systemRoles.contains(AMLCDDConstants.COMPLCHECKER)){
			assineeValidationFlg=assigneeName;
		}
		List<CountryRiskOverrideVO> checkerRiskScoreList = countryRiskOverrideService.getInitMakerRiskScoreData(map);
		List<CountryRiskOverrideVO> accountOpenList  = null;
		List<CountryRiskOverrideVO> docTypeList  = null;
		List<CountryRiskOverrideVO> ageRetailList  = null;
		List<CountryRiskOverrideVO> ageCardList  = null;
		List<CountryRiskOverrideVO> ageUPLList  = null;
		List<CountryRiskOverrideVO> countryRiskOverrideVOList = getPickListTypesList();
		try{
		Map<String, List<CountryRiskOverrideVO>>  picklistMap = countryRiskOverrideService.getCheckerData(countryRiskOverrideVOList, pickListId);
		if(AMLCDDConstants.PBOC_RISK_SCORE_MODE_OF_ACCT_CARD.equalsIgnoreCase(pickListType))
			accountOpenList = picklistMap.get(AMLCDDConstants.PBOC_RISK_SCORE_MODE_OF_ACCT_CARD);
		else if(AMLCDDConstants.PBOC_RISK_SCORE_IND_ID_TYPE.equalsIgnoreCase(pickListType))
			docTypeList = picklistMap.get(AMLCDDConstants.PBOC_RISK_SCORE_IND_ID_TYPE);
		else if(AMLCDDConstants.PBOC_RISK_SCORE_AGE_RETAIL.equalsIgnoreCase(pickListType)){
			ageRetailList = picklistMap.get(AMLCDDConstants.PBOC_RISK_SCORE_AGE_RETAIL_PARAMS);
			if(ageRetailList != null)
			ageRetailList.addAll(picklistMap.get(AMLCDDConstants.PBOC_RISK_SCORE_AGE_RETAIL));
		}else if(AMLCDDConstants.PBOC_RISK_SCORE_AGE_CARD.equalsIgnoreCase(pickListType)){
			ageCardList = picklistMap.get(AMLCDDConstants.PBOC_RISK_SCORE_AGE_CARD_PARAMS);
			if(ageCardList != null)
			ageCardList.addAll(picklistMap.get(AMLCDDConstants.PBOC_RISK_SCORE_AGE_CARD));
		}else if(AMLCDDConstants.PBOC_RISK_SCORE_AGE_UPL.equalsIgnoreCase(pickListType)){
			ageUPLList = picklistMap.get(AMLCDDConstants.PBOC_RISK_SCORE_AGE_UPL_PARAMS);
			if(ageUPLList != null)
			ageUPLList.addAll(picklistMap.get(AMLCDDConstants.PBOC_RISK_SCORE_AGE_UPL));
		}
		if(null != accountOpenList){
		for(CountryRiskOverrideVO countryRiskOverrideVO:accountOpenList){
			for(CountryRiskOverrideVO checkerRiskScore:checkerRiskScoreList){
				if(CommonUtility.isNotNull(countryRiskOverrideVO.getPickListType()) && CommonUtility.isNotNull(countryRiskOverrideVO.getModeOfAccountOpening())){
				if((countryRiskOverrideVO.getPickListType().equals(checkerRiskScore.getPickListType())) && (countryRiskOverrideVO.getModeOfAccountOpening().equals(checkerRiskScore.getPickListCode()))){
					countryRiskOverrideVO.setRiskScore(checkerRiskScore.getRiskScore());
					countryRiskOverrideVO.setCreateId(checkerRiskScore.getCreateId());
					countryRiskOverrideVO.setCreateDate(checkerRiskScore.getCreateDate());
					if(CommonUtility.isNotNull(map.get(checkerRiskScore.getCreateId())))
						countryRiskOverrideVO.setCreatedBy(map.get(checkerRiskScore.getCreateId()));
						else
							countryRiskOverrideVO.setCreatedBy(checkerRiskScore.getCreateId());	
						if(AMLCDDConstants.DELETE_PENDING.equals(countryRiskOverrideVO.getAuthStatus()) || AMLCDDConstants.ADD_PENDING.equals(countryRiskOverrideVO.getAuthStatus())){
						countryRiskOverrideVO.setModifiedRiskScore("");
						}
				}
				}
				
			}
		}
		}
		if(null != docTypeList){
		for(CountryRiskOverrideVO countryRiskOverrideVO:docTypeList){
			for(CountryRiskOverrideVO checkerRiskScore:checkerRiskScoreList){
				if(CommonUtility.isNotNull(countryRiskOverrideVO.getPickListType()) && CommonUtility.isNotNull(countryRiskOverrideVO.getIdType())){
				if((countryRiskOverrideVO.getPickListType().equals(checkerRiskScore.getPickListType())) && (countryRiskOverrideVO.getIdType().equals(checkerRiskScore.getPickListCode()))){
					countryRiskOverrideVO.setRiskScore(checkerRiskScore.getRiskScore());
					countryRiskOverrideVO.setCreateDate(checkerRiskScore.getCreateDate());
					countryRiskOverrideVO.setCreateId(checkerRiskScore.getCreateId());
					if(CommonUtility.isNotNull(map.get(checkerRiskScore.getCreateId())))
						countryRiskOverrideVO.setCreatedBy(map.get(checkerRiskScore.getCreateId()));
						else
							countryRiskOverrideVO.setCreatedBy(checkerRiskScore.getCreateId());	
					if(AMLCDDConstants.DELETE_PENDING.equals(countryRiskOverrideVO.getAuthStatus()) || AMLCDDConstants.ADD_PENDING.equals(countryRiskOverrideVO.getAuthStatus())){
						countryRiskOverrideVO.setModifiedRiskScore("");
						}
				}
				}
				
			}
		}
		}
		if(null != ageRetailList){
		for(CountryRiskOverrideVO countryRiskOverrideVO:ageRetailList){
			for(CountryRiskOverrideVO checkerRiskScore:checkerRiskScoreList){
				if(CommonUtility.isNotNull(countryRiskOverrideVO.getParentPickListType()) && CommonUtility.isNotNull(countryRiskOverrideVO.getParentPickListCode())){
				if((countryRiskOverrideVO.getParentPickListType().equals(checkerRiskScore.getPickListType())) && ((countryRiskOverrideVO.getParentPickListCode().trim()).equals(checkerRiskScore.getPickListCode().trim()))){
						countryRiskOverrideVO.setRiskScore(checkerRiskScore.getRiskScore());
						countryRiskOverrideVO.setCreateDate(checkerRiskScore.getCreateDate());
						countryRiskOverrideVO.setCreateId(checkerRiskScore.getCreateId());
						if(CommonUtility.isNotNull(map.get(checkerRiskScore.getCreateId())))
							countryRiskOverrideVO.setCreatedBy(map.get(checkerRiskScore.getCreateId()));
							else
								countryRiskOverrideVO.setCreatedBy(checkerRiskScore.getCreateId());	
						if(AMLCDDConstants.DELETE_PENDING.equals(countryRiskOverrideVO.getAuthStatus()) || AMLCDDConstants.ADD_PENDING.equals(countryRiskOverrideVO.getAuthStatus())){
							countryRiskOverrideVO.setModifiedRiskScore("");
							}
				}
				}
				
			}
		}
		}
		if(null != ageCardList){
		for(CountryRiskOverrideVO countryRiskOverrideVO:ageCardList){
			for(CountryRiskOverrideVO checkerRiskScore:checkerRiskScoreList){
				if(CommonUtility.isNotNull(countryRiskOverrideVO.getParentPickListType()) && CommonUtility.isNotNull(countryRiskOverrideVO.getParentPickListCode())){
				if((countryRiskOverrideVO.getParentPickListType().equals(checkerRiskScore.getPickListType())) && (countryRiskOverrideVO.getParentPickListCode().equals(checkerRiskScore.getPickListCode()))){
					countryRiskOverrideVO.setRiskScore(checkerRiskScore.getRiskScore());
					countryRiskOverrideVO.setCreateId(checkerRiskScore.getCreateId());
					countryRiskOverrideVO.setCreateDate(checkerRiskScore.getCreateDate());
					if(CommonUtility.isNotNull(map.get(checkerRiskScore.getCreateId())))
						countryRiskOverrideVO.setCreatedBy(map.get(checkerRiskScore.getCreateId()));
						else
							countryRiskOverrideVO.setCreatedBy(checkerRiskScore.getCreateId());	
					if(AMLCDDConstants.DELETE_PENDING.equals(countryRiskOverrideVO.getAuthStatus()) || AMLCDDConstants.ADD_PENDING.equals(countryRiskOverrideVO.getAuthStatus())){
						countryRiskOverrideVO.setModifiedRiskScore("");
						}
				}
				}
				
			}
		}
		}
		if(null != ageUPLList){
		for(CountryRiskOverrideVO countryRiskOverrideVO:ageUPLList){
			for(CountryRiskOverrideVO checkerRiskScore:checkerRiskScoreList){
				if(CommonUtility.isNotNull(countryRiskOverrideVO.getParentPickListType()) && CommonUtility.isNotNull(countryRiskOverrideVO.getParentPickListCode())){
				if((countryRiskOverrideVO.getParentPickListType().equals(checkerRiskScore.getPickListType())) && (countryRiskOverrideVO.getParentPickListCode().equals(checkerRiskScore.getPickListCode()))){
					countryRiskOverrideVO.setRiskScore(checkerRiskScore.getRiskScore());
					countryRiskOverrideVO.setCreateId(checkerRiskScore.getCreateId());
					countryRiskOverrideVO.setCreateDate(checkerRiskScore.getCreateDate());
					if(CommonUtility.isNotNull(map.get(checkerRiskScore.getCreateId())))
						countryRiskOverrideVO.setCreatedBy(map.get(checkerRiskScore.getCreateId()));
						else
							countryRiskOverrideVO.setCreatedBy(checkerRiskScore.getCreateId());	
					if(AMLCDDConstants.DELETE_PENDING.equals(countryRiskOverrideVO.getAuthStatus()) || AMLCDDConstants.ADD_PENDING.equals(countryRiskOverrideVO.getAuthStatus())){
						countryRiskOverrideVO.setModifiedRiskScore("");
						}
				}
				}
				
			}
		}
		}
		
		 mav.addObject("assignFlag", assineeValidationFlg);
		 mav.addObject(AMLCDDConstants.COUNTRY_RISK_OVERRIDE, super.getUiLabels(AMLCDDConstants.COUNTRY_RISK_OVERRIDE));
		 mav.addObject("uiLabels", super.getUiLabels(AMLCDDConstants.TRIGGER_REFRESH_RULES_CONFIG));
		 mav.addObject("accountOpenList", accountOpenList);
		 mav.addObject("docTypeList", docTypeList);
		 mav.addObject("ageRetailList", ageRetailList);
		 mav.addObject("ageCardList", ageCardList);
		 mav.addObject("ageUPLList", ageUPLList);
		 mav.addObject(AMLCDDConstants.COMMON, getUiLabels(AMLCDDConstants.COMMON));
		}
		catch (Exception e) {
			logger.error("Error Getting getInitialMakerData: "+e.getMessage());
		}
		 logger.info("Exits the Class: CountryRiskOverrideController ---> method: initCountryCheckerOverrideDetails");
		return mav;
		
	}

	/**
	 * Method Name: getPickListTypesList
	 * Description: Method to perform <Details>
	 * @return List<CountryRiskOverrideVO>
	 * @param 
	 * 
	 */
	private List<CountryRiskOverrideVO> getPickListTypesList() {
		List<CountryRiskOverrideVO> countryRiskOverrideVOList  = new ArrayList<>();
		List<String> pickListTypes =  Arrays.asList(AMLCDDConstants.COUNTRY_OVRRIDE_PICK_LIST_TYPES);
		CountryRiskOverrideVO countryRiskOverrideVO = null;
		for(String pickListType: pickListTypes)
		{
			if(AMLCDDConstants.PBOC_RISK_SCORE_MODE_OF_ACCT_CARD.equals(pickListType)){
			countryRiskOverrideVO = new CountryRiskOverrideVO();
			countryRiskOverrideVO.setPickListType(pickListType);
			countryRiskOverrideVOList.add(countryRiskOverrideVO);
			}
			else if(AMLCDDConstants.PBOC_RISK_SCORE_IND_ID_TYPE.equals(pickListType)){
				countryRiskOverrideVO = new CountryRiskOverrideVO();
				countryRiskOverrideVO.setPickListType(pickListType);
				countryRiskOverrideVOList.add(countryRiskOverrideVO);
				}
			else if(AMLCDDConstants.PBOC_RISK_SCORE_AGE_RETAIL_PARAMS.equals(pickListType)){
				countryRiskOverrideVO = new CountryRiskOverrideVO();
				countryRiskOverrideVO.setPickListType(pickListType);
				countryRiskOverrideVO.setParentPickListType(AMLCDDConstants.PBOC_RISK_SCORE_AGE_RETAIL);
				countryRiskOverrideVOList.add(countryRiskOverrideVO);
				}
			else if(AMLCDDConstants.PBOC_RISK_SCORE_AGE_CARD_PARAMS.equals(pickListType)){
				countryRiskOverrideVO = new CountryRiskOverrideVO();
				countryRiskOverrideVO.setPickListType(pickListType);
				countryRiskOverrideVO.setParentPickListType(AMLCDDConstants.PBOC_RISK_SCORE_AGE_CARD);
				countryRiskOverrideVOList.add(countryRiskOverrideVO);
				}
			else if(AMLCDDConstants.PBOC_RISK_SCORE_AGE_UPL_PARAMS.equals(pickListType)){
				countryRiskOverrideVO = new CountryRiskOverrideVO();
				countryRiskOverrideVO.setPickListType(pickListType);
				countryRiskOverrideVO.setParentPickListType(AMLCDDConstants.PBOC_RISK_SCORE_AGE_UPL);
				countryRiskOverrideVOList.add(countryRiskOverrideVO);
				}
			else if(AMLCDDConstants.PBOC_RISK_SCORE_AGE_RETAIL.equals(pickListType)){
				countryRiskOverrideVO = new CountryRiskOverrideVO();
				countryRiskOverrideVO.setPickListType(pickListType);
				countryRiskOverrideVOList.add(countryRiskOverrideVO);
				}
			else if(AMLCDDConstants.PBOC_RISK_SCORE_AGE_CARD.equals(pickListType)){
				countryRiskOverrideVO = new CountryRiskOverrideVO();
				countryRiskOverrideVO.setPickListType(pickListType);
				countryRiskOverrideVOList.add(countryRiskOverrideVO);
				}
			else if(AMLCDDConstants.PBOC_RISK_SCORE_AGE_UPL.equals(pickListType)){
				countryRiskOverrideVO = new CountryRiskOverrideVO();
				countryRiskOverrideVO.setPickListType(pickListType);
				countryRiskOverrideVOList.add(countryRiskOverrideVO);
				}
		}
		return countryRiskOverrideVOList;
	}
	
	/**
	 * Method Name: getModeOfAccountVOList
	 * Description: Method to perform get mode of account details
	 * @return List<CountryRiskOverrideVO>
	 * @param 
	 * 
	 */


	private List<CountryRiskOverrideVO> getModeOfAccountVOList(Map<String, List<PickListLkUpVO>> pickListMap, List<CountryRiskOverrideVO> countryRiskOverrideVOList, Map<String, String> userMap) {
		logger.info("Inside the Class: CountryRiskOverrideController ---> method: getModeOfAccountVOList");
		List<PickListLkUpVO> accountModeVOList = new ArrayList<PickListLkUpVO>();
		
		pickListMap.forEach((k,v)->{
				 if(AMLCDDConstants.PBOC_RISK_SCORE_MODE_OF_ACCT_CARD.equals(k)){
					v.forEach(VO->{
						accountModeVOList.add(VO);
					});
				}
		});
		List<CountryRiskOverrideVO> detailListVOs = new ArrayList<CountryRiskOverrideVO>();
		for(PickListLkUpVO listLkUpVO:accountModeVOList){
			if((AMLCDDConstants.APPROVED).equals(listLkUpVO.getAuthStatus()) && !((AMLCDDConstants.NOT_AVAILABLE).equals(listLkUpVO.getCode()))){
			CountryRiskOverrideVO accountOpenModeParamsVO = new CountryRiskOverrideVO();
						accountOpenModeParamsVO.setModeOfAccountOpening(listLkUpVO.getCode());
						accountOpenModeParamsVO.setRiskScore(listLkUpVO.getPickListvalue());
						accountOpenModeParamsVO.setPickListId(listLkUpVO.getPickListId());
						accountOpenModeParamsVO.setPickTypeFormVersionNum(listLkUpVO.getPickTypeFormVersionNum());
						accountOpenModeParamsVO.setPickListType(AMLCDDConstants.PBOC_RISK_SCORE_MODE_OF_ACCT_CARD);
						accountOpenModeParamsVO.setAuthStatus(listLkUpVO.getAuthStatus());
						accountOpenModeParamsVO.setLastUpdatedId(listLkUpVO.getLastUpdatedId());
						accountOpenModeParamsVO.setCreateId(listLkUpVO.getCreateId());
						if(CommonUtility.isNotNull(userMap.get(listLkUpVO.getCreateId())))
						accountOpenModeParamsVO.setCreatedBy(userMap.get(listLkUpVO.getCreateId()));
						else
							accountOpenModeParamsVO.setCreatedBy(listLkUpVO.getCreateId());	
						if(CommonUtility.isNotNull(userMap.get(listLkUpVO.getLastUpdatedId())))
							accountOpenModeParamsVO.setLastUpdatedBy(userMap.get(listLkUpVO.getLastUpdatedId()));
							else
								accountOpenModeParamsVO.setLastUpdatedBy(listLkUpVO.getLastUpdatedId());
						if(listLkUpVO.getCreatedDate() != null)
						accountOpenModeParamsVO.setCreateDate(CommonUtility.getFormatedDateWith24hrFmtTimeStamp(listLkUpVO.getCreatedDate()));
						if(listLkUpVO.getLastUpdatedDate() != null)
						accountOpenModeParamsVO.setLastUpdatedDate(CommonUtility.getFormatedDateWith24hrFmtTimeStamp(listLkUpVO.getLastUpdatedDate()));
						accountOpenModeParamsVO.setLastUpdatedId(listLkUpVO.getLastUpdatedId());
						for(CountryRiskOverrideVO countryRiskOverrideVO :countryRiskOverrideVOList)
						{
							if(AMLCDDConstants.PBOC_RISK_SCORE_MODE_OF_ACCT_CARD.equals(countryRiskOverrideVO.getPickListType()) && (accountOpenModeParamsVO.getModeOfAccountOpening().trim()).equals((countryRiskOverrideVO.getModeOfAccountOpening()).trim())){
								accountOpenModeParamsVO.setModifiedWorkflowStatus(countryRiskOverrideVO.getModifiedWorkflowStatus());
								if((AMLCDDConstants.DELETE_PENDING).equals(countryRiskOverrideVO.getModifiedWorkflowStatus())){
								accountOpenModeParamsVO.setModifiedRiskScore("");
								if(CommonUtility.isNotNull(userMap.get(countryRiskOverrideVO.getLastUpdatedBy())))
									accountOpenModeParamsVO.setLastUpdatedBy(userMap.get(countryRiskOverrideVO.getLastUpdatedBy()));
									else
								accountOpenModeParamsVO.setLastUpdatedBy(countryRiskOverrideVO.getLastUpdatedBy());
								accountOpenModeParamsVO.setLastUpdatedId(countryRiskOverrideVO.getLastUpdatedBy());
								accountOpenModeParamsVO.setLastUpdatedDate(countryRiskOverrideVO.getLastUpdatedDate());
								}
								else if((AMLCDDConstants.ADD_PENDING).equals(countryRiskOverrideVO.getModifiedWorkflowStatus()) || (AMLCDDConstants.UPDATE_PENDING).equals(countryRiskOverrideVO.getModifiedWorkflowStatus())){
									accountOpenModeParamsVO.setModifiedRiskScore(countryRiskOverrideVO.getModifiedRiskScore());
									accountOpenModeParamsVO.setModifiedWorkflowStatus(countryRiskOverrideVO.getModifiedWorkflowStatus());
									if(CommonUtility.isNotNull(userMap.get(countryRiskOverrideVO.getLastUpdatedBy())))
										accountOpenModeParamsVO.setLastUpdatedBy(userMap.get(countryRiskOverrideVO.getLastUpdatedBy()));
										else
									accountOpenModeParamsVO.setLastUpdatedBy(countryRiskOverrideVO.getLastUpdatedBy());
									accountOpenModeParamsVO.setLastUpdatedId(countryRiskOverrideVO.getLastUpdatedBy());
									accountOpenModeParamsVO.setLastUpdatedDate(countryRiskOverrideVO.getLastUpdatedDate());
								}
							}
						}
						
						
						detailListVOs.add(accountOpenModeParamsVO);
			}
				}
		logger.info("Exits the Class: CountryRiskOverrideController ---> method: getModeOfAccountVOList");	
		return detailListVOs;
	}
	

/**
 * Method Name: getDocumentTypeVOList
 * Description: Method to perform get document type details
 * @return List<CountryRiskOverrideVO>
 * @param 
 * 
 */
private List<CountryRiskOverrideVO> getDocumentTypeVOList(Map<String, List<PickListLkUpVO>> pickListMap, List<CountryRiskOverrideVO> countryRiskOverrideVOList, Map<String, String> userMap) {
	logger.info("Inside the Class: CountryRiskOverrideController ---> method: getDocumentTypeVOList");
	List<PickListLkUpVO> docsVOList = new ArrayList<PickListLkUpVO>();
	
	pickListMap.forEach((k,v)->{
			 if(AMLCDDConstants.PBOC_RISK_SCORE_IND_ID_TYPE.equals(k)){
				v.forEach(VO->{
					docsVOList.add(VO);
				});
			}
	});
	List<CountryRiskOverrideVO> detailListVOs = new ArrayList<CountryRiskOverrideVO>();
	
	for(PickListLkUpVO listLkUpVO:docsVOList){
		if((AMLCDDConstants.APPROVED).equals(listLkUpVO.getAuthStatus()) && !((AMLCDDConstants.NOT_AVAILABLE).equals(listLkUpVO.getCode()))){
		CountryRiskOverrideVO docTypeParamsVO = new CountryRiskOverrideVO();
					docTypeParamsVO.setIdType(listLkUpVO.getCode());
					docTypeParamsVO.setRiskScore(listLkUpVO.getPickListvalue());
					docTypeParamsVO.setPickListId(listLkUpVO.getPickListId());
					docTypeParamsVO.setPickTypeFormVersionNum(listLkUpVO.getPickTypeFormVersionNum());
					docTypeParamsVO.setPickListType(AMLCDDConstants.PBOC_RISK_SCORE_IND_ID_TYPE);
					docTypeParamsVO.setCreateId(listLkUpVO.getCreateId());
					if(CommonUtility.isNotNull(userMap.get(listLkUpVO.getCreateId())))
						docTypeParamsVO.setCreatedBy(userMap.get(listLkUpVO.getCreateId()));
						else
							docTypeParamsVO.setCreatedBy(listLkUpVO.getCreateId());	
						if(CommonUtility.isNotNull(userMap.get(listLkUpVO.getLastUpdatedId())))
							docTypeParamsVO.setLastUpdatedBy(userMap.get(listLkUpVO.getLastUpdatedId()));
							else
								docTypeParamsVO.setLastUpdatedBy(listLkUpVO.getLastUpdatedId());
					if(listLkUpVO.getCreatedDate() != null)
					docTypeParamsVO.setCreateDate(CommonUtility.getFormatedDateWith24hrFmtTimeStamp(listLkUpVO.getCreatedDate()));
					if(listLkUpVO.getLastUpdatedDate() != null)
					docTypeParamsVO.setLastUpdatedDate(CommonUtility.getFormatedDateWith24hrFmtTimeStamp(listLkUpVO.getLastUpdatedDate()));
					docTypeParamsVO.setLastUpdatedId(listLkUpVO.getLastUpdatedId());
					for(CountryRiskOverrideVO countryRiskOverrideVO :countryRiskOverrideVOList)
					{
						if(AMLCDDConstants.PBOC_RISK_SCORE_IND_ID_TYPE.equals(countryRiskOverrideVO.getPickListType()) && (docTypeParamsVO.getIdType().trim()).equals((countryRiskOverrideVO.getIdType()))){
							docTypeParamsVO.setModifiedWorkflowStatus(countryRiskOverrideVO.getModifiedWorkflowStatus());
							if((AMLCDDConstants.DELETE_PENDING).equals(countryRiskOverrideVO.getModifiedWorkflowStatus())){
								docTypeParamsVO.setModifiedRiskScore("");
								if(CommonUtility.isNotNull(userMap.get(countryRiskOverrideVO.getLastUpdatedBy())))
									docTypeParamsVO.setLastUpdatedBy(userMap.get(countryRiskOverrideVO.getLastUpdatedBy()));
										else
									docTypeParamsVO.setLastUpdatedBy(countryRiskOverrideVO.getLastUpdatedBy());
									docTypeParamsVO.setLastUpdatedId(countryRiskOverrideVO.getLastUpdatedBy());
									docTypeParamsVO.setLastUpdatedDate(countryRiskOverrideVO.getLastUpdatedDate());
							}
							else if((AMLCDDConstants.ADD_PENDING).equals(countryRiskOverrideVO.getModifiedWorkflowStatus()) || (AMLCDDConstants.UPDATE_PENDING).equals(countryRiskOverrideVO.getModifiedWorkflowStatus())){
								docTypeParamsVO.setModifiedRiskScore(countryRiskOverrideVO.getModifiedRiskScore());
								docTypeParamsVO.setModifiedWorkflowStatus(countryRiskOverrideVO.getModifiedWorkflowStatus());
								if(CommonUtility.isNotNull(userMap.get(countryRiskOverrideVO.getLastUpdatedBy())))
								docTypeParamsVO.setLastUpdatedBy(userMap.get(countryRiskOverrideVO.getLastUpdatedBy()));
									else
								docTypeParamsVO.setLastUpdatedBy(countryRiskOverrideVO.getLastUpdatedBy());
								docTypeParamsVO.setLastUpdatedId(countryRiskOverrideVO.getLastUpdatedBy());
								docTypeParamsVO.setLastUpdatedDate(countryRiskOverrideVO.getLastUpdatedDate());
							}
						}
					}
					detailListVOs.add(docTypeParamsVO);
		}
			}
	logger.info("Exits the Class: CountryRiskOverrideController ---> method: getDocumentTypeVOList");
	return detailListVOs;
}

/**
 * Method Name: getRetailVOList
 * Description: Method to perform get Retail data <Details>
 * @return List<CountryRiskOverrideVO>
 * @param 
 * 
 */
private List<CountryRiskOverrideVO> getRetailVOList(Map<String, List<PickListLkUpVO>> pickListMap,List<CountryRiskOverrideVO> countryRiskOverrideVOList, Map<String, String> userMap) {
		
	logger.info("Inside the Class: CountryRiskOverrideController ---> method: getRetailVOList");
	List<PickListLkUpVO> retailParamsVOList = new ArrayList();
	List<PickListLkUpVO> retailVOList = new ArrayList();
		
		pickListMap.forEach((k,v)->{
			
			 if(AMLCDDConstants.PBOC_RISK_SCORE_AGE_RETAIL_PARAMS.equals(k)){
				v.forEach(VO->{
					retailParamsVOList.add(VO);
				});
			}
			 if(AMLCDDConstants.PBOC_RISK_SCORE_AGE_RETAIL.equals(k)){
				v.forEach(VO->{
					retailVOList.add(VO);
				});
			}
		});
		
		Map<Object, List<PickListLkUpVO>> picklist = retailParamsVOList.stream().
        collect(Collectors.groupingBy(p -> p.getParentPickListId()));
		List<CountryRiskOverrideVO> detailListVOs = new ArrayList<CountryRiskOverrideVO>();
		//Parent iterate 
		for(PickListLkUpVO listLkUpVO:retailVOList){
			if((AMLCDDConstants.APPROVED).equals(listLkUpVO.getAuthStatus())){
			CountryRiskOverrideVO retailParamsVO = new CountryRiskOverrideVO();
			if(null != listLkUpVO.getPickListId()){
				retailParamsVO.setParentPickListCode(listLkUpVO.getCode());
				retailParamsVO.setRiskScore(listLkUpVO.getPickListvalue());
				retailParamsVO.setPickListCode(listLkUpVO.getCode());
				retailParamsVO.setParentPickListType(listLkUpVO.getPickListType());
				//Child iterate 
				List<PickListLkUpVO> listLkUpVOs = picklist.get(listLkUpVO.getPickListId());
				if(listLkUpVOs != null){
				for(PickListLkUpVO vo : listLkUpVOs){
					if(AMLCDDConstants.AGE_MIN_RETAIL.equalsIgnoreCase(vo.getCode())){
						retailParamsVO.setPickListCode(vo.getCode());
						retailParamsVO.setMinAge(vo.getPickListvalue());
						retailParamsVO.setMinAgePickListId(vo.getPickListId());
					}
					if(AMLCDDConstants.AGE_MAX_RETAIL.equalsIgnoreCase(vo.getCode())){
						retailParamsVO.setPickListCode(vo.getCode());
						retailParamsVO.setMaxAge(vo.getPickListvalue());
						retailParamsVO.setMaxAgePickListId(vo.getPickListId());
					}
					if(AMLCDDConstants.RELN_BALANCE_RETAL.equalsIgnoreCase(vo.getCode())){
						retailParamsVO.setPickListCode(vo.getCode());
						retailParamsVO.setHighRelationShipBalance(vo.getPickListvalue());
						retailParamsVO.setPickListId(vo.getPickListId());
					}
					if(AMLCDDConstants.CUST_TYPE_RETAIL.equalsIgnoreCase(vo.getCode())){
						retailParamsVO.setPickListCode(vo.getCode());
						retailParamsVO.setCustType(vo.getPickListvalue());
						retailParamsVO.setCustTypePickListId(vo.getPickListId());
					}
				}
						retailParamsVO.setPickListType(AMLCDDConstants.PBOC_RISK_SCORE_AGE_RETAIL_PARAMS);
						retailParamsVO.setParentPickListType(AMLCDDConstants.PBOC_RISK_SCORE_AGE_RETAIL);
						retailParamsVO.setParentPickListId(listLkUpVO.getPickListId());
						retailParamsVO.setCreateId(listLkUpVO.getCreateId());
						if(CommonUtility.isNotNull(userMap.get(listLkUpVO.getCreateId())))
							retailParamsVO.setCreatedBy(userMap.get(listLkUpVO.getCreateId()));
							else
								retailParamsVO.setCreatedBy(listLkUpVO.getCreateId());	
							if(CommonUtility.isNotNull(userMap.get(listLkUpVO.getLastUpdatedId())))
								retailParamsVO.setLastUpdatedBy(userMap.get(listLkUpVO.getLastUpdatedId()));
								else
									retailParamsVO.setLastUpdatedBy(listLkUpVO.getLastUpdatedId());
						if(listLkUpVO.getCreatedDate() != null)
						retailParamsVO.setCreateDate(CommonUtility.getFormatedDateWith24hrFmtTimeStamp(listLkUpVO.getCreatedDate()));
						if(listLkUpVO.getLastUpdatedDate() != null)
						retailParamsVO.setLastUpdatedDate(CommonUtility.getFormatedDateWith24hrFmtTimeStamp(listLkUpVO.getLastUpdatedDate()));
						retailParamsVO.setLastUpdatedId(listLkUpVO.getLastUpdatedId());
						for(CountryRiskOverrideVO countryRiskOverrideVO :countryRiskOverrideVOList)
						{
							if(AMLCDDConstants.PBOC_RISK_SCORE_AGE_RETAIL.equals(countryRiskOverrideVO.getPickListType())){
								if((listLkUpVO.getCode().trim()).equals((countryRiskOverrideVO.getPickListCode()).trim()) && (retailParamsVO.getParentPickListCode().trim()).equals((countryRiskOverrideVO.getPickListCode()).trim())){
								retailParamsVO.setModifiedWorkflowStatus(countryRiskOverrideVO.getModifiedWorkflowStatus());
								if((AMLCDDConstants.DELETE_PENDING).equals(countryRiskOverrideVO.getModifiedWorkflowStatus())){
									retailParamsVO.setModifiedRiskScore("");
									if(CommonUtility.isNotNull(userMap.get(countryRiskOverrideVO.getLastUpdatedBy())))
										retailParamsVO.setLastUpdatedBy(userMap.get(countryRiskOverrideVO.getLastUpdatedBy()));
										else
											retailParamsVO.setLastUpdatedBy(countryRiskOverrideVO.getLastUpdatedBy());
									retailParamsVO.setLastUpdatedId(countryRiskOverrideVO.getLastUpdatedBy());
									retailParamsVO.setLastUpdatedDate(countryRiskOverrideVO.getLastUpdatedDate());
								}
								else if((AMLCDDConstants.ADD_PENDING).equals(countryRiskOverrideVO.getModifiedWorkflowStatus()) || (AMLCDDConstants.UPDATE_PENDING).equals(countryRiskOverrideVO.getModifiedWorkflowStatus())){
									retailParamsVO.setModifiedRiskScore(countryRiskOverrideVO.getModifiedRiskScore());
									retailParamsVO.setModifiedWorkflowStatus(countryRiskOverrideVO.getModifiedWorkflowStatus());
									if(CommonUtility.isNotNull(userMap.get(countryRiskOverrideVO.getLastUpdatedBy())))
										retailParamsVO.setLastUpdatedBy(userMap.get(countryRiskOverrideVO.getLastUpdatedBy()));
										else
											retailParamsVO.setLastUpdatedBy(countryRiskOverrideVO.getLastUpdatedBy());
									retailParamsVO.setLastUpdatedId(countryRiskOverrideVO.getLastUpdatedBy());
									retailParamsVO.setLastUpdatedDate(countryRiskOverrideVO.getLastUpdatedDate());
								}
								retailParamsVO.setParentPickListCode(countryRiskOverrideVO.getParentPickListCode());
								}
							}
						}
				detailListVOs.add(retailParamsVO);
				}
			
			}
			}
		}
		logger.info("Exits the Class: CountryRiskOverrideController ---> method: getRetailVOList");
		return detailListVOs;
	}
	
	/**
	 * Method Name: getCardVOList
	 * Description: Method to perform get card data<Details>
	 * @return List<CountryRiskOverrideVO>
	 * @param 
	 * 
	 */
	private List<CountryRiskOverrideVO> getCardVOList(Map<String, List<PickListLkUpVO>> pickListMap, List<CountryRiskOverrideVO> countryRiskOverrideVOList, Map<String, String> userMap) {
		logger.info("Inside the Class: CountryRiskOverrideController ---> method: getCardVOList");
		List<PickListLkUpVO> cardParamsVOList = new ArrayList();
		List<PickListLkUpVO> cardVOList = new ArrayList();
		
		pickListMap.forEach((k,v)->{
			if(AMLCDDConstants.PBOC_RISK_SCORE_AGE_CARD_PARAMS.equals(k)){
				v.forEach(VO->{
					cardParamsVOList.add(VO);
				});
			}
			 if(AMLCDDConstants.PBOC_RISK_SCORE_AGE_CARD.equals(k)){
				v.forEach(VO->{
					cardVOList.add(VO);
				});
			}
		});
		Map<Object, List<PickListLkUpVO>> picklist = cardParamsVOList.stream().
				filter(p-> Objects.nonNull(p.getParentPickListId())).
        collect(Collectors.groupingBy(p -> p.getParentPickListId()));
		List<CountryRiskOverrideVO> detailListVOs = new ArrayList<CountryRiskOverrideVO>();
		//Parent iterate 
		for(PickListLkUpVO listLkUpVO:cardVOList){
			if((AMLCDDConstants.APPROVED).equals(listLkUpVO.getAuthStatus())){
			CountryRiskOverrideVO cardParamsVO = new CountryRiskOverrideVO();
			if(null != listLkUpVO.getPickListId()){
				cardParamsVO.setParentPickListCode(listLkUpVO.getCode());
				cardParamsVO.setRiskScore(listLkUpVO.getPickListvalue());
				cardParamsVO.setParentPickListType(listLkUpVO.getPickListType());
				//Child iterate 
				List<PickListLkUpVO> listLkUpVOs = picklist.get(listLkUpVO.getPickListId());
				if(listLkUpVOs != null){
				for(PickListLkUpVO vo : listLkUpVOs){
					if(AMLCDDConstants.AGE_MIN_CARD.equalsIgnoreCase(vo.getCode())){
						cardParamsVO.setMinAge(vo.getPickListvalue());
						cardParamsVO.setMinAgePickListId(vo.getPickListId());
					}
					if(AMLCDDConstants.AGE_MAX_CARD.equalsIgnoreCase(vo.getCode())){
						cardParamsVO.setMaxAge(vo.getPickListvalue());
						cardParamsVO.setMaxAgePickListId(vo.getPickListId());
					}
					if(AMLCDDConstants.CR_LIMIT_CARD.equalsIgnoreCase(vo.getCode())){
						cardParamsVO.setCreditLimit(vo.getPickListvalue());
						cardParamsVO.setPickListId(vo.getPickListId());
					}
					if(AMLCDDConstants.CUST_TYPE_CARD.equalsIgnoreCase(vo.getCode())){
						cardParamsVO.setCustType(vo.getPickListvalue());
						cardParamsVO.setCustTypePickListId(vo.getPickListId());
					}
				}
						cardParamsVO.setPickListType(AMLCDDConstants.PBOC_RISK_SCORE_AGE_CARD_PARAMS);
						cardParamsVO.setParentPickListType(AMLCDDConstants.PBOC_RISK_SCORE_AGE_CARD);
						cardParamsVO.setParentPickListId(cardParamsVO.getPickListId());
						cardParamsVO.setCreateId(listLkUpVO.getCreateId());
						if(CommonUtility.isNotNull(userMap.get(listLkUpVO.getCreateId())))
							cardParamsVO.setCreatedBy(userMap.get(listLkUpVO.getCreateId()));
							else
								cardParamsVO.setCreatedBy(listLkUpVO.getCreateId());	
							if(CommonUtility.isNotNull(userMap.get(listLkUpVO.getLastUpdatedId())))
								cardParamsVO.setLastUpdatedBy(userMap.get(listLkUpVO.getLastUpdatedId()));
								else
									cardParamsVO.setLastUpdatedBy(listLkUpVO.getLastUpdatedId());
						if(listLkUpVO.getCreatedDate() != null)
						cardParamsVO.setCreateDate(CommonUtility.getFormatedDateWith24hrFmtTimeStamp(listLkUpVO.getCreatedDate()));
						if(listLkUpVO.getLastUpdatedDate() != null)
						cardParamsVO.setLastUpdatedDate(CommonUtility.getFormatedDateWith24hrFmtTimeStamp(listLkUpVO.getLastUpdatedDate()));
						cardParamsVO.setLastUpdatedId(listLkUpVO.getLastUpdatedId());
						for(CountryRiskOverrideVO countryRiskOverrideVO :countryRiskOverrideVOList)
						{
							if(AMLCDDConstants.PBOC_RISK_SCORE_AGE_CARD.equals(countryRiskOverrideVO.getPickListType()) && (listLkUpVO.getCode().trim()).equals((countryRiskOverrideVO.getPickListCode()).trim()) && (cardParamsVO.getParentPickListCode().trim()).equals((countryRiskOverrideVO.getPickListCode()).trim())){
								cardParamsVO.setModifiedWorkflowStatus(countryRiskOverrideVO.getModifiedWorkflowStatus());
								if((AMLCDDConstants.DELETE_PENDING).equals(countryRiskOverrideVO.getModifiedWorkflowStatus())){
									cardParamsVO.setModifiedRiskScore("");
									if(CommonUtility.isNotNull(userMap.get(countryRiskOverrideVO.getLastUpdatedBy())))
										cardParamsVO.setLastUpdatedBy(userMap.get(countryRiskOverrideVO.getLastUpdatedBy()));
										else
											cardParamsVO.setLastUpdatedBy(countryRiskOverrideVO.getLastUpdatedBy());
									cardParamsVO.setLastUpdatedId(countryRiskOverrideVO.getLastUpdatedBy());
									cardParamsVO.setLastUpdatedDate(countryRiskOverrideVO.getLastUpdatedDate());
								}
								else if((AMLCDDConstants.ADD_PENDING).equals(countryRiskOverrideVO.getModifiedWorkflowStatus()) || (AMLCDDConstants.UPDATE_PENDING).equals(countryRiskOverrideVO.getModifiedWorkflowStatus())){
									cardParamsVO.setModifiedRiskScore(countryRiskOverrideVO.getModifiedRiskScore());
									cardParamsVO.setModifiedWorkflowStatus(countryRiskOverrideVO.getModifiedWorkflowStatus());
									if(CommonUtility.isNotNull(userMap.get(countryRiskOverrideVO.getLastUpdatedBy())))
										cardParamsVO.setLastUpdatedBy(userMap.get(countryRiskOverrideVO.getLastUpdatedBy()));
										else
											cardParamsVO.setLastUpdatedBy(countryRiskOverrideVO.getLastUpdatedBy());
									cardParamsVO.setLastUpdatedId(countryRiskOverrideVO.getLastUpdatedBy());
									cardParamsVO.setLastUpdatedDate(countryRiskOverrideVO.getLastUpdatedDate());
								}
								cardParamsVO.setParentPickListCode(countryRiskOverrideVO.getParentPickListCode());
							}
						}
				
				detailListVOs.add(cardParamsVO);
				}
			}
				
			}
			
		}
		logger.info("Exits the Class: CountryRiskOverrideController ---> method: getCardVOList");
		return detailListVOs;
	}
	
	


/**
 * Method Name: getUPLVOList
 * Description: Method to perform get upl data<Details>
 * @return List<CountryRiskOverrideVO>
 * @param 
 * 
 */
private List<CountryRiskOverrideVO> getUPLVOList(Map<String, List<PickListLkUpVO>> pickListMap, List<CountryRiskOverrideVO> countryRiskOverrideVOList, Map<String, String> userMap) {
	
	
	List<PickListLkUpVO> uplParamsVOList = new ArrayList();
	List<PickListLkUpVO> uplVOList = new ArrayList();
	
	pickListMap.forEach((k,v)->{
		
		 if(AMLCDDConstants.PBOC_RISK_SCORE_AGE_UPL_PARAMS.equals(k)){
			v.forEach(VO->{
				uplParamsVOList.add(VO);
			});
		}
		 if(AMLCDDConstants.PBOC_RISK_SCORE_AGE_UPL.equals(k)){
			v.forEach(VO->{
				uplVOList.add(VO);
			});
		}
	});
	Map<Object, List<PickListLkUpVO>> picklist = uplParamsVOList.stream().
    collect(Collectors.groupingBy(p -> p.getParentPickListId()));
	List<CountryRiskOverrideVO> detailListVOs = new ArrayList<CountryRiskOverrideVO>();
	//Parent iterate 
	for(PickListLkUpVO listLkUpVO:uplVOList){
		if((AMLCDDConstants.APPROVED).equals(listLkUpVO.getAuthStatus())){
		CountryRiskOverrideVO uplParamsVO = new CountryRiskOverrideVO();
		if(null != listLkUpVO.getPickListId()){
			uplParamsVO.setParentPickListCode(listLkUpVO.getCode());
			uplParamsVO.setRiskScore(listLkUpVO.getPickListvalue());
			uplParamsVO.setParentPickListType(listLkUpVO.getPickListType());
			//Child iterate 
			List<PickListLkUpVO> listLkUpVOs = picklist.get(listLkUpVO.getPickListId());
			if(listLkUpVOs != null){
			for(PickListLkUpVO vo : listLkUpVOs){
				if(AMLCDDConstants.AGE_MIN_UPL.equalsIgnoreCase(vo.getCode())){
					uplParamsVO.setMinAge(vo.getPickListvalue());
					uplParamsVO.setMinAgePickListId(vo.getPickListId());
				}
				if(AMLCDDConstants.AGE_MAX_UPL.equalsIgnoreCase(vo.getCode())){
					uplParamsVO.setMaxAge(vo.getPickListvalue());
					uplParamsVO.setMaxAgePickListId(vo.getPickListId());
				}
				if(AMLCDDConstants.LOAN_AMOUNT_UPL.equalsIgnoreCase(vo.getCode())){
					uplParamsVO.setLoanAmount(vo.getPickListvalue());
					uplParamsVO.setPickListId(vo.getPickListId());
				}
				if(AMLCDDConstants.CUST_TYPE_UPL.equalsIgnoreCase(vo.getCode())){
					uplParamsVO.setCustType(vo.getPickListvalue());
					uplParamsVO.setCustTypePickListId(vo.getPickListId());
				}
			}
					uplParamsVO.setPickListType(AMLCDDConstants.PBOC_RISK_SCORE_AGE_UPL_PARAMS);
					uplParamsVO.setParentPickListType(AMLCDDConstants.PBOC_RISK_SCORE_AGE_UPL);
					uplParamsVO.setParentPickListId(listLkUpVO.getPickListId());
					uplParamsVO.setCreateId(listLkUpVO.getCreateId());
					if(CommonUtility.isNotNull(userMap.get(listLkUpVO.getCreateId())))
						uplParamsVO.setCreatedBy(userMap.get(listLkUpVO.getCreateId()));
						else
							uplParamsVO.setCreatedBy(listLkUpVO.getCreateId());	
						if(CommonUtility.isNotNull(userMap.get(listLkUpVO.getLastUpdatedId())))
							uplParamsVO.setLastUpdatedBy(userMap.get(listLkUpVO.getLastUpdatedId()));
							else
								uplParamsVO.setLastUpdatedBy(listLkUpVO.getLastUpdatedId());
					if(listLkUpVO.getCreatedDate() != null)
					uplParamsVO.setCreateDate(CommonUtility.getFormatedDateWith24hrFmtTimeStamp(listLkUpVO.getCreatedDate()));
					if(listLkUpVO.getLastUpdatedDate() != null)
					uplParamsVO.setLastUpdatedDate(CommonUtility.getFormatedDateWith24hrFmtTimeStamp(listLkUpVO.getLastUpdatedDate()));
					uplParamsVO.setLastUpdatedId(listLkUpVO.getLastUpdatedId());
					for(CountryRiskOverrideVO countryRiskOverrideVO :countryRiskOverrideVOList)
					{
						if(AMLCDDConstants.PBOC_RISK_SCORE_AGE_UPL.equals(countryRiskOverrideVO.getPickListType()) && (listLkUpVO.getCode().trim()).equals((countryRiskOverrideVO.getPickListCode()).trim()) && (uplParamsVO.getParentPickListCode().trim()).equals((countryRiskOverrideVO.getPickListCode()).trim())){
							uplParamsVO.setModifiedWorkflowStatus(countryRiskOverrideVO.getModifiedWorkflowStatus());
							if((AMLCDDConstants.DELETE_PENDING).equals(countryRiskOverrideVO.getModifiedWorkflowStatus())){
								uplParamsVO.setModifiedRiskScore("");
								if(CommonUtility.isNotNull(userMap.get(countryRiskOverrideVO.getLastUpdatedBy())))
									uplParamsVO.setLastUpdatedBy(userMap.get(countryRiskOverrideVO.getLastUpdatedBy()));
									else
										uplParamsVO.setLastUpdatedBy(countryRiskOverrideVO.getLastUpdatedBy());
								uplParamsVO.setLastUpdatedId(countryRiskOverrideVO.getLastUpdatedBy());
								uplParamsVO.setLastUpdatedDate(countryRiskOverrideVO.getLastUpdatedDate());
							}
							else if((AMLCDDConstants.ADD_PENDING).equals(countryRiskOverrideVO.getModifiedWorkflowStatus()) || (AMLCDDConstants.UPDATE_PENDING).equals(countryRiskOverrideVO.getModifiedWorkflowStatus())){
								uplParamsVO.setModifiedRiskScore(countryRiskOverrideVO.getModifiedRiskScore());
								uplParamsVO.setModifiedWorkflowStatus(countryRiskOverrideVO.getModifiedWorkflowStatus());
								if(CommonUtility.isNotNull(userMap.get(countryRiskOverrideVO.getLastUpdatedBy())))
									uplParamsVO.setLastUpdatedBy(userMap.get(countryRiskOverrideVO.getLastUpdatedBy()));
									else
										uplParamsVO.setLastUpdatedBy(countryRiskOverrideVO.getLastUpdatedBy());
								uplParamsVO.setLastUpdatedId(countryRiskOverrideVO.getLastUpdatedBy());
								uplParamsVO.setLastUpdatedDate(countryRiskOverrideVO.getLastUpdatedDate());
							}
							uplParamsVO.setParentPickListCode(countryRiskOverrideVO.getParentPickListCode());
						}
					}
			
			detailListVOs.add(uplParamsVO);
			}
		}
		}
		
	}
	
	return detailListVOs;
}
	

	

	/**
	 * Method Name: updateCountryRiskOverride
	 * Description: Method to perform save and update picklist criteria
	 * @return CountryRiskOverrideVO
	 * @param 
	 * 
	 */
	@RequestMapping(value = "/update", method = RequestMethod.POST)
    public @ResponseBody CountryRiskOverrideVO updateCountryRiskOverride(@RequestBody CountryRiskOverrideVO configDetailVO) {
		logger.info("Inside the Class: CountryRiskOverrideController ---> method: updateCountryRiskOverride");
		 CountryRiskOverrideVO countryVO = new CountryRiskOverrideVO();
		try{
		UserContext context = getUserContext();
		String userId  = context.getUserId();
		//if(AMLCDDConstants.ADD_PENDING.equals(configDetailVO.getAuthStatus()))
		configDetailVO.setCreateId(context.getUsername());
		//else
		//	configDetailVO.setCreateId(configDetailVO.getCreateId());
		configDetailVO.setLastUpdatedId(context.getUsername());
		configDetailVO.setCountry(context.getKycCountryCode());
		Boolean validStatus = countryRiskOverrideService.getValidatePickListCode(configDetailVO);
		if(AMLCDDConstants.ADD_PENDING.equals(configDetailVO.getAuthStatus()) && (validStatus)){
			configDetailVO.setStatusMessage("Record with this pickListcode is under Processing..Please Add with another PickListCode");
			return configDetailVO;
		}
		countryRiskOverrideService.updateCountryRiskOverride(configDetailVO,getLanguage(), userId,getUserContext().getRoleId());
		countryVO = countryRiskOverrideService.getUpdatedRecord(configDetailVO,getLanguage());
		String saveSuccessMsg = nonFormErrorMessageRenderUtil.getScreenErrorMessage(getUserCountry(),getLanguage(), AMLCDDConstants.COUNTRY_SAVE_SUCCESS_MSG);
		String updateSuccessMsg = nonFormErrorMessageRenderUtil.getScreenErrorMessage(getUserCountry(),getLanguage(), AMLCDDConstants.COUNTRY_UPDATE_SUCCESS_MSG);
		if(AMLCDDConstants.ADD_PENDING.equals(configDetailVO.getAuthStatus()))
			countryVO.setStatusMessage(saveSuccessMsg);
		else if(AMLCDDConstants.UPDATE_PENDING.equals(configDetailVO.getAuthStatus()))
			countryVO.setStatusMessage(updateSuccessMsg);
		}
		catch (Exception e) {
			String errorMsg = nonFormErrorMessageRenderUtil.getScreenErrorMessage(getUserCountry(),getLanguage(), AMLCDDConstants.EXCEPTION_CODE);
			countryVO.setStatusMessage(errorMsg);
			logger.error("Error updateCountryRiskOverride"+e.getMessage());
		}
	    logger.info("Exits the Class: CountryRiskOverrideController ---> method: updateCountryRiskOverride");
		return countryVO;
    }
	
	/**
	 * Method Name: deleteCountryRiskOverride
	 * Description: Method to perform delete picklist criteria
	 * @return CountryRiskOverrideVO
	 * @param 
	 * 
	 */
	@RequestMapping(value = "/delete", method = RequestMethod.POST)
    public @ResponseBody CountryRiskOverrideVO deleteCountryRiskOverride(@RequestBody List<CountryRiskOverrideVO> configDetailVOList) {
		logger.info("Inside the Class: CountryRiskOverrideController ---> method: deleteCountryRiskOverride");
		List<CountryRiskOverrideVO> systemRiskConfigDetailVOList = new ArrayList<>();
		String userId  = null;
		CountryRiskOverrideVO countryRiskConfigDetailVO = new CountryRiskOverrideVO();
		try{
		for(CountryRiskOverrideVO configDetailVO: configDetailVOList){
		UserContext context = getUserContext();
		userId = context.getUserId();
		configDetailVO.setCreateId(context.getUsername());
		configDetailVO.setLastUpdatedId(context.getUsername());
		configDetailVO.setCountry(context.getKycCountryCode());
		systemRiskConfigDetailVOList.add(configDetailVO);
		}
		countryRiskOverrideService.deleteCountryRiskOverride(systemRiskConfigDetailVOList,getLanguage(), userId,getUserContext().getRoleId());
		
		for(CountryRiskOverrideVO countryRiskOverrideVO :configDetailVOList){
			countryRiskConfigDetailVO = countryRiskOverrideService.getUpdatedRecord(countryRiskOverrideVO,getLanguage());
		}
		String deleteSuccessMsg = nonFormErrorMessageRenderUtil.getScreenErrorMessage(getUserCountry(),getLanguage(),AMLCDDConstants.COUNTRY_DELETE_SUCCESS_MSG);
		countryRiskConfigDetailVO.setStatusMessage(deleteSuccessMsg);
		}
		catch (Exception e) {
			String errorMsg = nonFormErrorMessageRenderUtil.getScreenErrorMessage(getUserCountry(),getLanguage(), AMLCDDConstants.EXCEPTION_CODE);
			countryRiskConfigDetailVO.setStatusMessage(errorMsg);
			logger.error("Error deleteCountryRiskOverride"+e.getMessage());
		}
	    logger.info("Exits the Class: CountryRiskOverrideController ---> method: deleteCountryRiskOverride");
		return countryRiskConfigDetailVO;
    }
	
	/**
	 * Method Name: checkerUpdate
	 * Description: Method to update with checker decision
	 * @return CountryRiskOverrideVO
	 * @param 
	 * 
	 */
	@RequestMapping(value = "/checkerUpdate", method = RequestMethod.POST)
    public @ResponseBody CountryRiskOverrideVO updateChecker(@RequestBody List<CountryRiskOverrideVO> configDetailVOList) {
		logger.info("Inside the Class: CountryRiskOverrideController ---> method: updateChecker");
		List<CountryRiskOverrideVO> countryVOList = new ArrayList<>();
		List<PickListLkUpVO> pickListLkUpVOLst = new ArrayList<>();
		String makerLastUpdatedId = null;
		CountryRiskOverrideVO countryRiskOverrideVO = new CountryRiskOverrideVO();
		UserContext context = getUserContext();
		try{
		for(CountryRiskOverrideVO configDetailVO: configDetailVOList){
			configDetailVO.setLastUpdatedId(context.getUsername());
			configDetailVO.setCountry(context.getKycCountryCode());
		countryVOList.add(configDetailVO);
		makerLastUpdatedId = configDetailVO.getLastUpdatedId();
		}
		pickListLkUpVOLst = countryRiskOverrideService.updateChecker(countryVOList,getLanguage(), context.getUserId(), makerLastUpdatedId,getUserContext().getRoleId());
		//countryRiskOverrideService.updateCache(getLanguage(), pickListLkUpVOLst);
		String updateSuccessMsg = nonFormErrorMessageRenderUtil.getScreenErrorMessage(getUserCountry(),getLanguage(), AMLCDDConstants.COUNTRY_UPDATE_SUCCESS_MSG);
		countryRiskOverrideVO.setStatusMessage(updateSuccessMsg);
		}
		catch (Exception e) {
			String errorMsg = nonFormErrorMessageRenderUtil.getScreenErrorMessage(getUserCountry(),getLanguage(), AMLCDDConstants.EXCEPTION_CODE);
			countryRiskOverrideVO.setStatusMessage(errorMsg);
			logger.error("Error on checkerUpdate: "+e.getMessage());
		}
	    logger.info("Exits the Class: CountryRiskOverrideController ---> method: updateChecker");
		return countryRiskOverrideVO;
    }
	
	/**
	 * Method Name: getCountryRiskOverrideHistory
	 * Description: Method to perform load history details
	 * @return List<CountryRiskOverrideVO>
	 * @param 
	 * 
	 */
	@RequestMapping(value = "/loadHistory")
    public @ResponseBody List<CountryRiskOverrideVO> getCountryRiskOverrideHistory(@RequestBody CountryRiskOverrideVO configDetailVO) {
		logger.info("Inside the Class: CountryRiskOverrideController ---> method: getCountryRiskOverrideHistory");
		List<CountryRiskOverrideVO> pickListHistoryList = null;
		Integer pageSize = configDetailVO.getPageCount();
		Integer pageNumber = configDetailVO.getPageNumber();
		Integer fromIndex = null;
		try{
		pickListHistoryList = countryRiskOverrideService.getHistoryDetails(configDetailVO);
     fromIndex = (pageNumber - 1) * pageSize;
    if(pickListHistoryList == null || pickListHistoryList.size() < fromIndex){
        return Collections.emptyList();
    }
		}
		catch (Exception e) {
			logger.error("Error on getCountryRiskOverrideHistory "+e.getMessage());
		}
		
	    logger.info("Exits the Class: CountryRiskOverrideController ---> method: getCountryRiskOverrideHistory");
	    return pickListHistoryList.subList(fromIndex, Math.min(fromIndex + pageSize, pickListHistoryList.size()));
    }
	
	
	/**
	 * Method Name: getHistoryCount
	 * Description: Method to perform <Details>
	 * @return Integer
	 * @param 
	 * 
	 */
	@RequestMapping(value = "/historyCount")
    public @ResponseBody Integer getHistoryCount(@RequestBody CountryRiskOverrideVO configDetailVO) {
		logger.info("Inside the Class: CountryRiskOverrideController ---> method: getHistoryCount");
		List<CountryRiskOverrideVO> pickListHistory = null;
		try{
			pickListHistory = countryRiskOverrideService.getHistoryDetails(configDetailVO);
			}
			catch (Exception e) {
				logger.error("Error on getHistoryCount "+e.getMessage());
			}
		Integer count = pickListHistory.size();
	    logger.info("Exits the Class: CountryRiskOverrideController ---> method: getHistoryCount");
	    return count;
    }
	
	@RequestMapping(value = "/getContextUserName")
	 public @ResponseBody String getContextUserName() {
		logger.info("Inside the Class: CountryRiskOverrideController ---> method: getContextUserName");
		UserContext context = getUserContext();
		//Map<String, String> userMap = null;
		//userMap = countryRiskOverrideService.getAllUsers();
		//if(userMap.get(context.getUserId()) != null)
		//return userMap.get(context.getUserId());
		//return userMap.get(context.getUserId());
		  logger.info("Exits the Class: CountryRiskOverrideController ---> method: getContextUserName");
		return context.getUserId();
		 
	 }
	
	
	/**
	 * Method Name: getUIValues
	 * Description: Method returns UI values
	 * @return CountryRiskOverrideVO
	 * @param 
	 * 
	 */
	@RequestMapping(value = "/getUIValues", method = RequestMethod.POST)
    public @ResponseBody CountryRiskOverrideVO getUIValues() {
		logger.info("Inside the Class: CountryRiskOverrideController ---> method: getUIValues");
		CountryRiskOverrideVO countryRiskOverrideVO = new CountryRiskOverrideVO();
		try{
		String codeValidationMsg = nonFormErrorMessageRenderUtil.getScreenErrorMessage(getUserCountry(),getLanguage(), AMLCDDConstants.EXISTING_CODE_VALIDATION);
		String riskScoreValidation = nonFormErrorMessageRenderUtil.getScreenErrorMessage(getUserCountry(),getLanguage(), AMLCDDConstants.RISK_SCORE_VALIDATION);
		String custTypeValidation = nonFormErrorMessageRenderUtil.getScreenErrorMessage(getUserCountry(),getLanguage(), AMLCDDConstants.CUST_TYPE_REQUIRED);
		String erroOccured = nonFormErrorMessageRenderUtil.getScreenErrorMessage(getUserCountry(),getLanguage(), AMLCDDConstants.ERROR_OCCURED);
		String commentsRequired = nonFormErrorMessageRenderUtil.getScreenErrorMessage(getUserCountry(),getLanguage(), AMLCDDConstants.COMMENTS_REQUIRED);
		String noDataAvailable = nonFormErrorMessageRenderUtil.getScreenErrorMessage(getUserCountry(),getLanguage(), AMLCDDConstants.NO_DATA_AVAILABLE);
		String futureDateValidation = nonFormErrorMessageRenderUtil.getScreenErrorMessage(getUserCountry(),getLanguage(), AMLCDDConstants.FUTURE_DATE_VALIDATION);
		String atleastOneCheckBox = nonFormErrorMessageRenderUtil.getScreenErrorMessage(getUserCountry(),getLanguage(), AMLCDDConstants.ATLEAST_ONE_CHECKBOX);
		String ageDiffValidation = nonFormErrorMessageRenderUtil.getScreenErrorMessage(getUserCountry(),getLanguage(), AMLCDDConstants.AGE_DIFF_VALIDATION);
		String validMinAge = nonFormErrorMessageRenderUtil.getScreenErrorMessage(getUserCountry(),getLanguage(), AMLCDDConstants.VALID_MIN_AGE);
		String validMaxAge = nonFormErrorMessageRenderUtil.getScreenErrorMessage(getUserCountry(),getLanguage(), AMLCDDConstants.VALID_MAX_AGE);
		String missDataRequired = nonFormErrorMessageRenderUtil.getScreenErrorMessage(getUserCountry(),getLanguage(), AMLCDDConstants.MISS_DATA_REQUIRED);
		String minAgeRequired = nonFormErrorMessageRenderUtil.getScreenErrorMessage(getUserCountry(),getLanguage(), AMLCDDConstants.MINI_AGE_REQUIRED);
		String maxAgeRequired = nonFormErrorMessageRenderUtil.getScreenErrorMessage(getUserCountry(),getLanguage(), AMLCDDConstants.MAXI_AGE_REQUIRED);
		String riskScoreRequired = nonFormErrorMessageRenderUtil.getScreenErrorMessage(getUserCountry(),getLanguage(), AMLCDDConstants.RISK_SCORE_REQUIRED);
		String numbersOnly = nonFormErrorMessageRenderUtil.getScreenErrorMessage(getUserCountry(),getLanguage(), AMLCDDConstants.ONLY_NUMBERS_REQUIRED);
		String alphabetsOnly = nonFormErrorMessageRenderUtil.getScreenErrorMessage(getUserCountry(),getLanguage(), AMLCDDConstants.ONLY_ALPHABETS_REQUIRED);
		String saveSuccessMsg = nonFormErrorMessageRenderUtil.getScreenErrorMessage(getUserCountry(),getLanguage(), AMLCDDConstants.COUNTRY_SAVE_SUCCESS_MSG);
		String updateSuccessMsg = nonFormErrorMessageRenderUtil.getScreenErrorMessage(getUserCountry(),getLanguage(), AMLCDDConstants.COUNTRY_UPDATE_SUCCESS_MSG);
		String deleteSuccessMsg = nonFormErrorMessageRenderUtil.getScreenErrorMessage(getUserCountry(),getLanguage(), AMLCDDConstants.COUNTRY_DELETE_SUCCESS_MSG);
		String commentsLbl = nonFormErrorMessageRenderUtil.getScreenErrorMessage(getUserCountry(),getLanguage(), AMLCDDConstants.COMMENTS_LBL);

		countryRiskOverrideVO.setCodeValidationMsg(codeValidationMsg);
		countryRiskOverrideVO.setRiskScoreValidation(riskScoreValidation);
		countryRiskOverrideVO.setCustTypeValidation(custTypeValidation);
		countryRiskOverrideVO.setErroOccured(erroOccured);
		countryRiskOverrideVO.setCommentsRequired(commentsRequired);
		countryRiskOverrideVO.setNoDataAvailable(noDataAvailable);
		countryRiskOverrideVO.setFutureDateValidation(futureDateValidation);
		countryRiskOverrideVO.setAtleastOneCheckBox(atleastOneCheckBox);
		countryRiskOverrideVO.setAgeDiffValidation(ageDiffValidation);
		countryRiskOverrideVO.setValidMinAge(validMinAge);
		countryRiskOverrideVO.setValidMaxAge(validMaxAge);
		countryRiskOverrideVO.setMissDataRequired(missDataRequired);
		countryRiskOverrideVO.setMinAgeRequired(minAgeRequired);
		countryRiskOverrideVO.setMaxAgeRequired(maxAgeRequired);
		countryRiskOverrideVO.setRiskScoreRequired(riskScoreRequired);
		countryRiskOverrideVO.setNumbersOnly(numbersOnly);
		countryRiskOverrideVO.setAlphabetsOnly(alphabetsOnly);
		countryRiskOverrideVO.setSaveSuccessMsg(saveSuccessMsg);
		countryRiskOverrideVO.setUpdateSuccessMsg(updateSuccessMsg);
		countryRiskOverrideVO.setDeleteSuccessMsg(deleteSuccessMsg);
		countryRiskOverrideVO.setCommentsLbl(commentsLbl);
		
		}
		catch (Exception e) {
			String errorMsg = nonFormErrorMessageRenderUtil.getScreenErrorMessage(getUserCountry(),getLanguage(), AMLCDDConstants.EXCEPTION_CODE);
			countryRiskOverrideVO.setStatusMessage(errorMsg);
			logger.error("Error on checkerUpdate: "+e.getMessage());
		}
	    logger.info("Exits the Class: CountryRiskOverrideController ---> method: getUIValues");
		return countryRiskOverrideVO;
    }
	
}
