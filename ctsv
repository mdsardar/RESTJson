import java.sql.Timestamp;
import java.text.ParseException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

import org.slf4j.Logger;
import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.citigroup.amlcdd.audittrail.service.ICddAuditLogService;
import com.citigroup.amlcdd.common.constants.AMLCDDConstants;
import com.citigroup.amlcdd.common.constants.AuditLogActionEventEnum;
import com.citigroup.amlcdd.common.constants.ScreenNameEnum;
import com.citigroup.amlcdd.entity.PickListLkupEntity;
import com.citigroup.amlcdd.entity.PickListLkupStagingEntity;
import com.citigroup.amlcdd.forms.cdd.vo.CddBaseVO;
import com.citigroup.amlcdd.forms.comment.dao.IKycCommentDao;
import com.citigroup.amlcdd.framework.service.AmlCddCacheUtil;
import com.citigroup.amlcdd.framework.util.CommonUtility;
import com.citigroup.amlcdd.framework.vo.PickListLkUpVO;
import com.citigroup.amlcdd.risk.country.dao.ICountryRiskOverrideDao;
import com.citigroup.amlcdd.risk.country.vo.CountryRiskOverrideVO;
import com.citigroup.amlcdd.workflow.config.WorkflowConstant;
import com.citigroup.amlcdd.workflow.config.WorkflowConstant.ConfigType;
import com.citigroup.amlcdd.workflow.config.WorkflowConstant.UserMntnceUserAction;
import com.citigroup.amlcdd.workflow.entity.KycTask;
import com.citigroup.amlcdd.workflow.interfaces.IUserMaintenanceService;
import com.citigroup.amlcdd.workflow.vo.UserMntnceWorkflowParamVo;
import com.citigroup.amlcdd.workflow.vo.WorkflowResponseUserMntnc;

/**
 *  Class to <Details>
 */
@Service
public class CountryRiskOverrideServiceImpl implements ICountryRiskOverrideService{

	@Autowired
	private ICountryRiskOverrideDao riskOverRideDao; 
	@Autowired
	private ICddAuditLogService auditLogService;
	@Autowired
	protected AmlCddCacheUtil amlCddCacheUtil;
	@Autowired
	private IUserMaintenanceService userMaintananceServices;
	@Autowired
	private IKycCommentDao kycCommentDao;
	
	private static Map<String,String> riskScoreMap=new HashMap<String,String>();
	
	 static{
			riskScoreMap.put("0","-");
			riskScoreMap.put("1","L");
			riskScoreMap.put("2","M");
			riskScoreMap.put("3","HL");
			riskScoreMap.put("4","HM");
			riskScoreMap.put("5","HH");	 	
		}
		
	
	
	private static final Logger logger = org.slf4j.LoggerFactory.getLogger(CountryRiskOverrideServiceImpl.class);
	
	private static final List<String> checkerStatusList = Arrays.asList(AMLCDDConstants.ADD_APPROVED, AMLCDDConstants.ADD_REJECTED, AMLCDDConstants.UPDATE_APPROVED, AMLCDDConstants.UPDATE_REJECTED, AMLCDDConstants.DELETE_APPROVED, AMLCDDConstants.DELETE_REJECTED);
	
	
	/* (non-Javadoc)
	 * @see com.citigroup.amlcdd.risk.country.service.ICountryRiskOverrideService#updateCountryRiskOverride(com.citigroup.amlcdd.risk.country.vo.CountryRiskOverrideVO)
	 */
	@Override
	public void updateCountryRiskOverride(CountryRiskOverrideVO countryRiskOverrideVO,String language, String userId,String roleId) throws Exception {
		logger.info("Inside the Class: CountryRiskOverrideServiceImpl ---> method: updateCountryRiskOverride");
		List<String> lstChildPickList = Arrays.asList(AMLCDDConstants.PBOC_RISK_SCORE_AGE_RETAIL_PARAMS, AMLCDDConstants.PBOC_RISK_SCORE_AGE_CARD_PARAMS, AMLCDDConstants.PBOC_RISK_SCORE_AGE_UPL_PARAMS);
		List<CountryRiskOverrideVO> countryVOList = new ArrayList<>();
		List<PickListLkupStagingEntity> pickListLkupStgEntityList = addToStaging(countryRiskOverrideVO,language);
		List<PickListLkupStagingEntity> lstPickListLkupStagingEntity = riskOverRideDao.updateCountryRiskOverride(pickListLkupStgEntityList);
		Map<String, String> userMap = getAllUsers();
		countryVOList = copyToCountryVO(countryRiskOverrideVO, lstPickListLkupStagingEntity, userMap);
		for(CountryRiskOverrideVO countryOverrideVO:countryVOList){
				startJBPMWorkflow(countryOverrideVO, WorkflowConstant.COMPLMAKER, ConfigType.COUNTRY_OVERRIDE, userId);
			countryOverrideVO.setComments(countryRiskOverrideVO.getComments());
			if(lstChildPickList.contains(countryRiskOverrideVO.getPickListType()))
				countryOverrideVO.setPickListId(countryOverrideVO.getParentPickListId());
			saveAuditLog(countryOverrideVO,roleId);
			countryOverrideVO.setCountry(countryRiskOverrideVO.getCountry());
			riskOverRideDao.updateComments(countryOverrideVO);
			}
		logger.info("Exits the Class: CountryRiskOverrideServiceImpl ---> method: updateCountryRiskOverride");
	}

	/**
	 * Method Name: getUpdatedRecord
	 * Description: Method to perform get updated record
	 * @return void
	 * @param 
	 * 
	 */
	public CountryRiskOverrideVO getUpdatedRecord(CountryRiskOverrideVO configDetailVo,String language) {
		logger.info("Inside the Class: CountryRiskOverrideServiceImpl ---> method: getUpdatedRecord");
		Map<String, String> userMap = getAllUsers();
		 List<CountryRiskOverrideVO> countryVOLst = null;
		CountryRiskOverrideVO configDetailVO = new CountryRiskOverrideVO();
		if(AMLCDDConstants.ADD_PENDING.equals(configDetailVo.getAuthStatus())){
				configDetailVo.setModifiedWorkflowStatus(AMLCDDConstants.ADD_PENDING);
				List<PickListLkupStagingEntity> pickListLkupStgEntityList = addToStaging(configDetailVo,language);
				List<PickListLkupStagingEntity> lstPickListLkupStgEntity = riskOverRideDao.getUpdatedRecord(pickListLkupStgEntityList);
				for(PickListLkupStagingEntity pickListLkupStagingEntity :lstPickListLkupStgEntity){
					configDetailVo.setCreateDate(CommonUtility.getFormatedDateWith24hrFmtTimeStamp(pickListLkupStagingEntity.getCreatedDt()));
					configDetailVo.setLastUpdatedDate(CommonUtility.getFormatedDateWith24hrFmtTimeStamp(pickListLkupStagingEntity.getModifiedDt()));
				}
				
				configDetailVo.setAuthStatus(AMLCDDConstants.ADD_PENDING);
				configDetailVo.setModifiedRiskScore("");
				if(CommonUtility.isNotNull(userMap.get(configDetailVo.getLastUpdatedId())))
					configDetailVo.setLastUpdatedBy(userMap.get(configDetailVo.getLastUpdatedId()));
					else
						configDetailVo.setLastUpdatedBy(configDetailVo.getLastUpdatedId());
				if(CommonUtility.isNotNull(userMap.get(configDetailVo.getCreateId())))
					configDetailVo.setCreatedBy(userMap.get(configDetailVo.getCreateId()));
					else
						configDetailVo.setCreatedBy(configDetailVo.getCreateId());
				return configDetailVo;
		}
		List<PickListLkupStagingEntity> pickListLkupStgEntityList = addToStaging(configDetailVo,language);
		List<PickListLkupStagingEntity> lstPickListLkupStgEntity = riskOverRideDao.getUpdatedRecord(pickListLkupStgEntityList);
		for(PickListLkupStagingEntity pickListLkupStagingEntity :lstPickListLkupStgEntity){
			configDetailVO.setModifiedWorkflowStatus(pickListLkupStagingEntity.getAuthStatus());
			configDetailVO.setModifiedRiskScore(pickListLkupStagingEntity.getPickListvalue());
			configDetailVO.setPickListType(pickListLkupStagingEntity.getPickListType());
			if(CommonUtility.isNotNull(userMap.get(pickListLkupStagingEntity.getModifiedBy())))
			configDetailVO.setLastUpdatedBy(userMap.get(pickListLkupStagingEntity.getModifiedBy()));
			else
			configDetailVO.setLastUpdatedBy(pickListLkupStagingEntity.getModifiedBy());
			configDetailVO.setLastUpdatedId(pickListLkupStagingEntity.getModifiedBy());
			configDetailVO.setLastUpdatedDate(CommonUtility.getFormatedDateWith24hrFmtTimeStamp(pickListLkupStagingEntity.getModifiedDt()));
			configDetailVO.setAuthStatus(pickListLkupStagingEntity.getAuthStatus());
		}
		logger.info("Exits the Class: CountryRiskOverrideServiceImpl ---> method: getUpdatedRecord");
		return configDetailVO;
	}
	
	/**
	 * Method Name: addToStaging
	 * Description: Method to get picklist criteria details
	 * @return List<PickListLkupStagingEntity>
	 * @param 
	 * 
	 */
	private List<PickListLkupStagingEntity> addToStaging(CountryRiskOverrideVO configDetailVO,String language) {
		logger.info("Inside the Class: CountryRiskOverrideServiceImpl ---> method: addToStaging");
		List<PickListLkupStagingEntity> pickListLkupStgEntityList = new ArrayList<PickListLkupStagingEntity>();
			if(AMLCDDConstants.PBOC_RISK_SCORE_MODE_OF_ACCT_CARD.equals(configDetailVO.getPickListType())){
			PickListLkupStagingEntity pickListLkupStgEntity1  = new PickListLkupStagingEntity();
			pickListLkupStgEntity1.setPickListCode((configDetailVO.getModeOfAccountOpening()).trim());
			pickListLkupStgEntity1.setPickListvalue(configDetailVO.getRiskScore());
			pickListLkupStgEntity1.setPickListDesc(AMLCDDConstants.MODE_OF_ACCOUNT_OPENING);
			pickListLkupStgEntity1.setPickListType(configDetailVO.getPickListType());
			pickListLkupStgEntity1.setPickListId(configDetailVO.getPickListId());
			pickListLkupStgEntity1.setParentPickListId(configDetailVO.getPickListId());
			pickListLkupStgEntityList.add(pickListLkupStgEntity1);
		}
		if(AMLCDDConstants.PBOC_RISK_SCORE_IND_ID_TYPE.equals(configDetailVO.getPickListType())){
			PickListLkupStagingEntity pickListLkupStgEntity1  = new PickListLkupStagingEntity();
			pickListLkupStgEntity1.setPickListCode((configDetailVO.getIdType()).trim());
			pickListLkupStgEntity1.setPickListvalue(configDetailVO.getRiskScore());
			pickListLkupStgEntity1.setPickListDesc(AMLCDDConstants.INDIVIDUAL_ID_TYPE);
			pickListLkupStgEntity1.setPickListType(configDetailVO.getPickListType());
			pickListLkupStgEntity1.setPickListId(configDetailVO.getPickListId());
			pickListLkupStgEntity1.setParentPickListId(configDetailVO.getPickListId());
			pickListLkupStgEntityList.add(pickListLkupStgEntity1);
		}
		
		if(AMLCDDConstants.PBOC_RISK_SCORE_AGE_RETAIL.equals(configDetailVO.getPickListType()) || AMLCDDConstants.PBOC_RISK_SCORE_AGE_RETAIL_PARAMS.equals(configDetailVO.getPickListType())){
			PickListLkupStagingEntity pickListLkupStgEntity1  = new PickListLkupStagingEntity();
			if(configDetailVO.getPickListId() != null)
				pickListLkupStgEntity1.setPickListCode(configDetailVO.getParentPickListCode().trim());
			else{
			Long count = riskOverRideDao.getParentRecordsCount(AMLCDDConstants.PBOC_RISK_SCORE_AGE_RETAIL);
			count++;
			pickListLkupStgEntity1.setPickListCode(AMLCDDConstants.RISK_SCORE_AGE_RETAIL+count);
			}
			pickListLkupStgEntity1.setPickListvalue(configDetailVO.getRiskScore());
			pickListLkupStgEntity1.setPickListId(configDetailVO.getParentPickListId());
			pickListLkupStgEntity1.setPickListType(configDetailVO.getParentPickListType());
			pickListLkupStgEntity1.setParentPickListId(configDetailVO.getParentPickListId());
		
			PickListLkupStagingEntity pickListLkupStgEntity2  = new PickListLkupStagingEntity();
			pickListLkupStgEntity2.setPickListCode(AMLCDDConstants.AGE_MAX_RETAIL.trim());
			pickListLkupStgEntity2.setPickListvalue(configDetailVO.getMaxAge());
			pickListLkupStgEntity2.setPickListDesc(AMLCDDConstants.AGE_LIMIT_FOR_RETAIL);
			pickListLkupStgEntity2.setPickListId(configDetailVO.getMaxAgePickListId());
			pickListLkupStgEntity2.setPickListType(configDetailVO.getPickListType());
			pickListLkupStgEntity2.setParentPickListId(configDetailVO.getMaxAgePickListId());
			
			PickListLkupStagingEntity pickListLkupStgEntity3  = new PickListLkupStagingEntity();
			pickListLkupStgEntity3.setPickListCode(AMLCDDConstants.RELN_BALANCE_RETAL.trim());
			pickListLkupStgEntity3.setPickListvalue(configDetailVO.getHighRelationShipBalance());
			pickListLkupStgEntity3.setPickListDesc(AMLCDDConstants.RELN_BALANCE_RETAL);
			pickListLkupStgEntity3.setPickListId(configDetailVO.getPickListId());
			pickListLkupStgEntity3.setPickListType(configDetailVO.getPickListType());
			pickListLkupStgEntity3.setParentPickListId(configDetailVO.getPickListId());
			
			PickListLkupStagingEntity pickListLkupStgEntity4  = new PickListLkupStagingEntity();
			pickListLkupStgEntity4.setPickListCode(AMLCDDConstants.CUST_TYPE_RETAIL);
			pickListLkupStgEntity4.setPickListvalue(configDetailVO.getCustType());
			pickListLkupStgEntity4.setPickListDesc(AMLCDDConstants.CUSTOMER_TYPE);
			pickListLkupStgEntity4.setPickListId(configDetailVO.getCustTypePickListId());
			pickListLkupStgEntity4.setPickListType(configDetailVO.getPickListType());
			pickListLkupStgEntity4.setParentPickListId(configDetailVO.getCustTypePickListId());
			
			PickListLkupStagingEntity pickListLkupStgEntity5  = new PickListLkupStagingEntity();
			pickListLkupStgEntity5.setPickListCode(AMLCDDConstants.AGE_MIN_RETAIL);
			pickListLkupStgEntity5.setPickListvalue(configDetailVO.getMinAge());
			pickListLkupStgEntity5.setPickListDesc(AMLCDDConstants.AGE_LIMIT_FOR_RETAIL);
			pickListLkupStgEntity5.setPickListId(configDetailVO.getMinAgePickListId());
			pickListLkupStgEntity5.setPickListType(configDetailVO.getPickListType());
			pickListLkupStgEntity5.setParentPickListId(configDetailVO.getMinAgePickListId());

			pickListLkupStgEntityList.add(pickListLkupStgEntity1);
			pickListLkupStgEntityList.add(pickListLkupStgEntity2);
			pickListLkupStgEntityList.add(pickListLkupStgEntity3);
			pickListLkupStgEntityList.add(pickListLkupStgEntity4);
			pickListLkupStgEntityList.add(pickListLkupStgEntity5);
		}
		if(AMLCDDConstants.PBOC_RISK_SCORE_AGE_CARD.equals(configDetailVO.getPickListType()) || AMLCDDConstants.PBOC_RISK_SCORE_AGE_CARD_PARAMS.equals(configDetailVO.getPickListType())){
			
			PickListLkupStagingEntity pickListLkupStgEntity1  = new PickListLkupStagingEntity();
			if(configDetailVO.getPickListId() != null)
				pickListLkupStgEntity1.setPickListCode(configDetailVO.getParentPickListCode().trim());
			else{
			Long count = riskOverRideDao.getParentRecordsCount(AMLCDDConstants.PBOC_RISK_SCORE_AGE_CARD);
			count++;
			pickListLkupStgEntity1.setPickListCode(AMLCDDConstants.RISK_SCORE_AGE_CARD+count);
			}
			pickListLkupStgEntity1.setPickListvalue(configDetailVO.getRiskScore());
			pickListLkupStgEntity1.setPickListId(configDetailVO.getParentPickListId());
			pickListLkupStgEntity1.setPickListType(configDetailVO.getParentPickListType());
			pickListLkupStgEntity1.setParentPickListId(configDetailVO.getParentPickListId());
		
			PickListLkupStagingEntity pickListLkupStgEntity2  = new PickListLkupStagingEntity();
			pickListLkupStgEntity2.setPickListCode(AMLCDDConstants.AGE_MAX_CARD);
			pickListLkupStgEntity2.setPickListvalue(configDetailVO.getMaxAge());
			pickListLkupStgEntity2.setPickListDesc(AMLCDDConstants.AGE_LIMIT_FOR_CARD);
			pickListLkupStgEntity2.setPickListId(configDetailVO.getMaxAgePickListId());
			pickListLkupStgEntity2.setPickListType(configDetailVO.getPickListType());
			pickListLkupStgEntity2.setParentPickListId(configDetailVO.getMaxAgePickListId());
			
			PickListLkupStagingEntity pickListLkupStgEntity3  = new PickListLkupStagingEntity();
			pickListLkupStgEntity3.setPickListCode(AMLCDDConstants.CR_LIMIT_CARD);
			pickListLkupStgEntity3.setPickListvalue(configDetailVO.getCreditLimit());
			pickListLkupStgEntity3.setPickListDesc(AMLCDDConstants.CREDIT_LIMIT);
			pickListLkupStgEntity3.setPickListId(configDetailVO.getPickListId());
			pickListLkupStgEntity3.setPickListType(configDetailVO.getPickListType());
			pickListLkupStgEntity3.setParentPickListId(configDetailVO.getPickListId());
			
			PickListLkupStagingEntity pickListLkupStgEntity4  = new PickListLkupStagingEntity();
			pickListLkupStgEntity4.setPickListCode(AMLCDDConstants.CUST_TYPE_CARD);
			pickListLkupStgEntity4.setPickListvalue(configDetailVO.getCustType());
			pickListLkupStgEntity4.setPickListDesc(AMLCDDConstants.CUSTOMER_TYPE);
			pickListLkupStgEntity4.setPickListId(configDetailVO.getCustTypePickListId());
			pickListLkupStgEntity4.setPickListType(configDetailVO.getPickListType());
			pickListLkupStgEntity4.setParentPickListId(configDetailVO.getCustTypePickListId());
			
			PickListLkupStagingEntity pickListLkupStgEntity5  = new PickListLkupStagingEntity();
			pickListLkupStgEntity5.setPickListCode(AMLCDDConstants.AGE_MIN_CARD);
			pickListLkupStgEntity5.setPickListvalue(configDetailVO.getMinAge());
			pickListLkupStgEntity5.setPickListDesc(AMLCDDConstants.AGE_LIMIT_FOR_CARD);
			pickListLkupStgEntity5.setPickListId(configDetailVO.getMinAgePickListId());
			pickListLkupStgEntity5.setPickListType(configDetailVO.getPickListType());
			pickListLkupStgEntity5.setParentPickListId(configDetailVO.getMinAgePickListId());
			
			pickListLkupStgEntityList.add(pickListLkupStgEntity1);
			pickListLkupStgEntityList.add(pickListLkupStgEntity2);
			pickListLkupStgEntityList.add(pickListLkupStgEntity3);
			pickListLkupStgEntityList.add(pickListLkupStgEntity4);
			pickListLkupStgEntityList.add(pickListLkupStgEntity5);
		}
		
		if(AMLCDDConstants.PBOC_RISK_SCORE_AGE_UPL.equals(configDetailVO.getPickListType()) || AMLCDDConstants.PBOC_RISK_SCORE_AGE_UPL_PARAMS.equals(configDetailVO.getPickListType())){
			PickListLkupStagingEntity pickListLkupStgEntity1  = new PickListLkupStagingEntity();
			if(configDetailVO.getPickListId() != null)
				pickListLkupStgEntity1.setPickListCode(configDetailVO.getParentPickListCode().trim());
			else{
			Long count = riskOverRideDao.getParentRecordsCount(AMLCDDConstants.PBOC_RISK_SCORE_AGE_UPL);
			count++;
			pickListLkupStgEntity1.setPickListCode(AMLCDDConstants.PBOC_RISK_SCORE_AGE_UPL+count);
			}
			pickListLkupStgEntity1.setPickListvalue(configDetailVO.getRiskScore());
			pickListLkupStgEntity1.setPickListId(configDetailVO.getParentPickListId());
			pickListLkupStgEntity1.setPickListType(configDetailVO.getParentPickListType());
			pickListLkupStgEntity1.setParentPickListId(configDetailVO.getParentPickListId());
		
			PickListLkupStagingEntity pickListLkupStgEntity2  = new PickListLkupStagingEntity();
			pickListLkupStgEntity2.setPickListCode(AMLCDDConstants.AGE_MAX_UPL);
			pickListLkupStgEntity2.setPickListvalue(configDetailVO.getMaxAge());
			pickListLkupStgEntity2.setPickListDesc(AMLCDDConstants.AGE_LIMIT_FOR_UPL);
			pickListLkupStgEntity2.setPickListId(configDetailVO.getMaxAgePickListId());
			pickListLkupStgEntity2.setPickListType(configDetailVO.getPickListType());
			pickListLkupStgEntity2.setParentPickListId(configDetailVO.getMaxAgePickListId());
			
			PickListLkupStagingEntity pickListLkupStgEntity3  = new PickListLkupStagingEntity();
			pickListLkupStgEntity3.setPickListCode(AMLCDDConstants.LOAN_AMOUNT_UPL);
			pickListLkupStgEntity3.setPickListvalue(configDetailVO.getLoanAmount());
			pickListLkupStgEntity3.setPickListDesc(AMLCDDConstants.LOANAMOUNT);
			pickListLkupStgEntity3.setPickListId(configDetailVO.getPickListId());
			pickListLkupStgEntity3.setPickListType(configDetailVO.getPickListType());
			pickListLkupStgEntity3.setParentPickListId(configDetailVO.getPickListId());
			
			PickListLkupStagingEntity pickListLkupStgEntity4  = new PickListLkupStagingEntity();
			pickListLkupStgEntity4.setPickListCode(AMLCDDConstants.CUST_TYPE_UPL);
			pickListLkupStgEntity4.setPickListvalue(configDetailVO.getCustType());
			pickListLkupStgEntity4.setPickListDesc(AMLCDDConstants.CUSTOMER_TYPE);
			pickListLkupStgEntity4.setPickListId(configDetailVO.getCustTypePickListId());
			pickListLkupStgEntity4.setPickListType(configDetailVO.getPickListType());
			pickListLkupStgEntity4.setParentPickListId(configDetailVO.getCustTypePickListId());
			
			PickListLkupStagingEntity pickListLkupStgEntity5  = new PickListLkupStagingEntity();
			pickListLkupStgEntity5.setPickListCode(AMLCDDConstants.AGE_MIN_UPL);
			pickListLkupStgEntity5.setPickListvalue(configDetailVO.getMinAge());
			pickListLkupStgEntity5.setPickListDesc(AMLCDDConstants.AGE_LIMIT_FOR_UPL);
			pickListLkupStgEntity5.setPickListId(configDetailVO.getMinAgePickListId());
			pickListLkupStgEntity5.setPickListType(configDetailVO.getPickListType());
			pickListLkupStgEntity5.setParentPickListId(configDetailVO.getMinAgePickListId());
			
			pickListLkupStgEntityList.add(pickListLkupStgEntity1);
			pickListLkupStgEntityList.add(pickListLkupStgEntity2);
			pickListLkupStgEntityList.add(pickListLkupStgEntity3);
			pickListLkupStgEntityList.add(pickListLkupStgEntity4);
			pickListLkupStgEntityList.add(pickListLkupStgEntity5);
		}
		for(PickListLkupStagingEntity pickListLkupStgEntity : pickListLkupStgEntityList){
			pickListLkupStgEntity.setLocaleLangCode(language);
			/*if(configDetailVO.getCreateDate() != null)
			//pickListLkupStgEntity.setCreatedDt(new Timestamp(configDetailVO.getCreateDate().getTime()));
			pickListLkupStgEntity.setCreatedDt(configDetailVO.getCreateDate());
			else*/
			//pickListLkupStgEntity.setCreatedDt(new Timestamp(System.currentTimeMillis()));
			pickListLkupStgEntity.setCreatedDt(new Timestamp(System.currentTimeMillis()));
			pickListLkupStgEntity.setCreatedBy(configDetailVO.getCreateId());
			pickListLkupStgEntity.setModifiedDt(new Timestamp(System.currentTimeMillis()));
			pickListLkupStgEntity.setModifiedBy(configDetailVO.getLastUpdatedId());
			//}
			if(configDetailVO.getPickListId() != null)
				pickListLkupStgEntity.setAuthStatus(AMLCDDConstants.UPDATE_PENDING);
			else
				pickListLkupStgEntity.setAuthStatus(AMLCDDConstants.ADD_PENDING);
			
			
		}
		logger.info("Exits the Class: NprdDaoImpl ---> method: addToStaging");
		return pickListLkupStgEntityList;
	}

	/* (non-Javadoc)
	 * @see com.citigroup.amlcdd.risk.country.service.ICountryRiskOverrideService#deleteCountryRiskOverride(java.util.List)
	 */
	public void deleteCountryRiskOverride(List<CountryRiskOverrideVO> configDetailVOList,String language, String userId,String roleId) throws Exception{
		logger.info("Inside the Class: CountryRiskOverrideServiceImpl ---> method: deleteCountryRiskOverride");
		List<String> lstChildPickList = Arrays.asList(AMLCDDConstants.PBOC_RISK_SCORE_AGE_RETAIL_PARAMS, AMLCDDConstants.PBOC_RISK_SCORE_AGE_CARD_PARAMS, AMLCDDConstants.PBOC_RISK_SCORE_AGE_UPL_PARAMS);
		List<PickListLkupStagingEntity> lstPickListLkupStgEntity = new ArrayList<>();
		List<CountryRiskOverrideVO> countryVOList = new ArrayList<>();
		String country = null;
		for(CountryRiskOverrideVO systemRiskConfigDetailVO: configDetailVOList)
		{
			List<PickListLkupStagingEntity> pickListLkupStgEntityList = addToStaging(systemRiskConfigDetailVO,language);
			for(PickListLkupStagingEntity pickListLkupStagingEntity:pickListLkupStgEntityList){
				pickListLkupStagingEntity.setAuthStatus(AMLCDDConstants.DELETE_PENDING);
				lstPickListLkupStgEntity.add(pickListLkupStagingEntity);
				country = systemRiskConfigDetailVO.getCountry();
			}
		}
		lstPickListLkupStgEntity = riskOverRideDao.updateCountryRiskOverride(lstPickListLkupStgEntity);
		Map<String, String> userMap = getAllUsers();
		for(CountryRiskOverrideVO countryRiskOverrideVO :configDetailVOList){
		countryVOList = copyToCountryVO(countryRiskOverrideVO, lstPickListLkupStgEntity, userMap);
		}
		for(CountryRiskOverrideVO countryOverrideVO:countryVOList){
			if(lstChildPickList.contains(countryOverrideVO.getPickListType()))
				countryOverrideVO.setPickListId(countryOverrideVO.getParentPickListId());
			countryOverrideVO.setCountry(country);
			saveAuditLog(countryOverrideVO,roleId);
			riskOverRideDao.updateComments(countryOverrideVO);
				startJBPMWorkflow(countryOverrideVO, WorkflowConstant.COMPLMAKER, ConfigType.COUNTRY_OVERRIDE, userId);
			}
		logger.info("Exits the Class: CountryRiskOverrideServiceImpl ---> method: deleteCountryRiskOverride");
	}
	
	/* (non-Javadoc)
	 * @see com.citigroup.amlcdd.risk.country.service.ICountryRiskOverrideService#getHistoryDetails(com.citigroup.amlcdd.risk.country.vo.CountryRiskOverrideVO)
	 */
	public List<CountryRiskOverrideVO> getHistoryDetails(CountryRiskOverrideVO configDetailVO) throws ParseException
	{
		logger.info("Inside the Class: CountryRiskOverrideServiceImpl ---> method: getHistoryDetails");
		//Map<String, String> commentsMap = riskOverRideDao.getKYCComments(AMLCDDConstants.COUNTRY_RISK_OVERRIDE);
		Map<String, String> commentsMap = null;
		List<String> modifiedIdLst = new ArrayList<>();
		//List<String> componentIdList = riskOverRideDao.getKYCCommentComponentIds(AMLCDDConstants.COUNTRY_RISK_OVERRIDE);
		List<String> lstChildPickList = Arrays.asList(AMLCDDConstants.PBOC_RISK_SCORE_AGE_RETAIL_PARAMS, AMLCDDConstants.PBOC_RISK_SCORE_AGE_CARD_PARAMS, AMLCDDConstants.PBOC_RISK_SCORE_AGE_UPL_PARAMS);
		List<CountryRiskOverrideVO> countryVOList = new ArrayList<>();
		List<String> pickListIdList = new ArrayList<>();
		PickListLkupStagingEntity pickListLkupStagingEntity = new PickListLkupStagingEntity();
		pickListLkupStagingEntity.setPickListType(configDetailVO.getPickListType());
		pickListLkupStagingEntity.setAuthStatus(configDetailVO.getAuthStatus());
		String fromDate = configDetailVO.getFromDate();
		String toDate = configDetailVO.getToDate();
		String parentPickListType = configDetailVO.getParentPickListType();
		List<PickListLkupStagingEntity> lstPickListLkupEntity= riskOverRideDao.getHistoryDetails(pickListLkupStagingEntity, fromDate, toDate, parentPickListType);
		Map<String, String> userMap = getAllUsers();
		List<CountryRiskOverrideVO> listSystemRiskConfigDetailVO = copyToCountryVO(configDetailVO,
				lstPickListLkupEntity, userMap);
		if(!("ALL".equals(configDetailVO.getAuthStatus())))
			listSystemRiskConfigDetailVO = listSystemRiskConfigDetailVO.stream().filter(p->p.getAuthStatus() != null && p.getAuthStatus().equals(configDetailVO.getAuthStatus())).collect(Collectors.toList());
		for(CountryRiskOverrideVO countryRiskOverrideVO :listSystemRiskConfigDetailVO){
			if(lstChildPickList.contains(countryRiskOverrideVO.getPickListType()))
				//if(componentIdList.contains(String.valueOf(countryRiskOverrideVO.getParentPickListId())))
			pickListIdList.add(String.valueOf(countryRiskOverrideVO.getParentPickListId()));
			else
				//if(componentIdList.contains(String.valueOf(countryRiskOverrideVO.getPickListId())))
			pickListIdList.add(String.valueOf(countryRiskOverrideVO.getPickListId()));
			
		}
		for(CountryRiskOverrideVO countryRiskOverrideVO :listSystemRiskConfigDetailVO){
			modifiedIdLst.add(countryRiskOverrideVO.getLastUpdatedId());
		}
		if(pickListIdList.size() !=0)
		commentsMap = riskOverRideDao.getKYCComments(pickListIdList, AMLCDDConstants.COUNTRY_RISK_OVERRIDE, modifiedIdLst);
		for(CountryRiskOverrideVO countryRiskOverrideVO :listSystemRiskConfigDetailVO){
			//if(componentIdList.size()>0){
			//	if(componentIdList.contains(countryRiskOverrideVO.getPickListId())){
			if(lstChildPickList.contains(countryRiskOverrideVO.getPickListType())){
					if(CommonUtility.isNotNull(countryRiskOverrideVO.getLastUpdatedId()))
					countryRiskOverrideVO.setComments(commentsMap.get(String.valueOf(countryRiskOverrideVO.getParentPickListId())));
			}
			else{
				if(CommonUtility.isNotNull(countryRiskOverrideVO.getLastUpdatedId()))
				countryRiskOverrideVO.setComments(commentsMap.get(String.valueOf(countryRiskOverrideVO.getPickListId())));
			}
					countryVOList.add(countryRiskOverrideVO);
				//}
			//}
		}
		logger.info("Inside the Class: CountryRiskOverrideServiceImpl ---> method: getHistoryDetails");
		return countryVOList;
	}

	/**
	 * Method Name: copyToCountryVO
	 * Description: Method to copy entity to VO
	 * @return List<CountryRiskOverrideVO>
	 * @param 
	 * 
	 */
	private List<CountryRiskOverrideVO> copyToCountryVO(CountryRiskOverrideVO configDetailVO,
			List<PickListLkupStagingEntity> lstPickListLkupEntity, Map<String, String> userMap) {
		List<PickListLkupStagingEntity> listPickListLkupEntity = null;
		List<CountryRiskOverrideVO> listSystemRiskConfigDetailVO = new ArrayList<CountryRiskOverrideVO>();

		if(AMLCDDConstants.PBOC_RISK_SCORE_MODE_OF_ACCT_CARD.equals(configDetailVO.getPickListType())){
		for(PickListLkupStagingEntity pickListLkupEntity: lstPickListLkupEntity)
		{
			if(pickListLkupEntity.getPickListType().equals(AMLCDDConstants.PBOC_RISK_SCORE_MODE_OF_ACCT_CARD)){
		CountryRiskOverrideVO sysRiskConfigDetailVO =  new CountryRiskOverrideVO();
		sysRiskConfigDetailVO.setModeOfAccountOpening(pickListLkupEntity.getPickListCode().trim());
		sysRiskConfigDetailVO.setRiskScore(pickListLkupEntity.getPickListvalue());
		sysRiskConfigDetailVO.setComments(configDetailVO.getComments());
		if(AMLCDDConstants.UPDATE_PENDING.equals(pickListLkupEntity.getAuthStatus()))
			sysRiskConfigDetailVO.setModifiedRiskScore(pickListLkupEntity.getPickListvalue());
		sysRiskConfigDetailVO = appendData(sysRiskConfigDetailVO,pickListLkupEntity, userMap);
		listSystemRiskConfigDetailVO.add(sysRiskConfigDetailVO);
			}
		}
		}
		else if(AMLCDDConstants.PBOC_RISK_SCORE_IND_ID_TYPE.equals(configDetailVO.getPickListType())){
			for(PickListLkupStagingEntity pickListLkupEntity: lstPickListLkupEntity)
		{
				if(pickListLkupEntity.getPickListType().equals(AMLCDDConstants.PBOC_RISK_SCORE_IND_ID_TYPE)){
			CountryRiskOverrideVO sysRiskConfigDetailVO =  new CountryRiskOverrideVO();
			sysRiskConfigDetailVO.setIdType(pickListLkupEntity.getPickListCode().trim());
			sysRiskConfigDetailVO.setRiskScore(pickListLkupEntity.getPickListvalue());
			sysRiskConfigDetailVO.setComments(configDetailVO.getComments());
			if(AMLCDDConstants.UPDATE_PENDING.equals(pickListLkupEntity.getAuthStatus()))
				sysRiskConfigDetailVO.setModifiedRiskScore(pickListLkupEntity.getPickListvalue());
			sysRiskConfigDetailVO = appendData(sysRiskConfigDetailVO,pickListLkupEntity, userMap);
			listSystemRiskConfigDetailVO.add(sysRiskConfigDetailVO);
				}
		}
		}
		else if(AMLCDDConstants.PBOC_RISK_SCORE_AGE_RETAIL_PARAMS.equals(configDetailVO.getPickListType()) || AMLCDDConstants.PBOC_RISK_SCORE_AGE_RETAIL.equals(configDetailVO.getPickListType()))
			{
				List<PickListLkupStagingEntity> retailParamsEntityList = new ArrayList<>();
				List<PickListLkupStagingEntity> retailEntityList = new ArrayList<>();
				for(PickListLkupStagingEntity PickListLkupEntity:lstPickListLkupEntity){
					if(AMLCDDConstants.PBOC_RISK_SCORE_AGE_RETAIL_PARAMS.equals(PickListLkupEntity.getPickListType()))
						retailParamsEntityList.add(PickListLkupEntity);
					else if(AMLCDDConstants.PBOC_RISK_SCORE_AGE_RETAIL.equals(PickListLkupEntity.getPickListType()))
						retailEntityList.add(PickListLkupEntity);
				
					}
			Map<Object, List<PickListLkupStagingEntity>> pickListMap = retailParamsEntityList.stream().
			        collect(Collectors.groupingBy(p -> p.getParentPickListId()));
			if(!pickListMap.isEmpty()){
					//Parent iterate 
					for(PickListLkupStagingEntity pickListLkupEntity:retailEntityList){
						CountryRiskOverrideVO childVO = new CountryRiskOverrideVO();
							//Child iterate 
						if(null != pickListLkupEntity.getPickListId()){
							childVO.setParentPickListCode(pickListLkupEntity.getPickListCode().trim());
							childVO.setParentPickListType(pickListLkupEntity.getPickListType().trim());
							childVO.setParentPickListId(pickListLkupEntity.getPickListId());
							childVO.setRiskScore(pickListLkupEntity.getPickListvalue());
							childVO.setComments(configDetailVO.getComments());
							if(AMLCDDConstants.UPDATE_PENDING.equals(pickListLkupEntity.getAuthStatus()))
								childVO.setModifiedRiskScore(pickListLkupEntity.getPickListvalue());
							if(checkerStatusList.contains(pickListLkupEntity.getAuthStatus()))
								listPickListLkupEntity = pickListMap.get(pickListLkupEntity.getParentPickListId());
							else
								listPickListLkupEntity = pickListMap.get(pickListLkupEntity.getPickListId());
							if(listPickListLkupEntity != null){
								for(PickListLkupStagingEntity pickListLkpEntity : listPickListLkupEntity){
									if(AMLCDDConstants.AGE_MIN_RETAIL.equalsIgnoreCase(pickListLkpEntity.getPickListCode().trim())){
										childVO.setMinAge(pickListLkpEntity.getPickListvalue());
										childVO.setMinAgePickListId(pickListLkpEntity.getPickListId());
									}
									if(AMLCDDConstants.AGE_MAX_RETAIL.equalsIgnoreCase(pickListLkpEntity.getPickListCode().trim())){
										childVO.setMaxAge(pickListLkpEntity.getPickListvalue());
										childVO.setMaxAgePickListId(pickListLkpEntity.getPickListId());
									}
									if(AMLCDDConstants.RELN_BALANCE_RETAL.equalsIgnoreCase(pickListLkpEntity.getPickListCode().trim())){
										childVO.setHighRelationShipBalance(pickListLkpEntity.getPickListvalue());
										childVO.setPickListId(pickListLkpEntity.getPickListId());
									}
									if(AMLCDDConstants.CUST_TYPE_RETAIL.equalsIgnoreCase(pickListLkpEntity.getPickListCode().trim())){
										childVO.setCustType(pickListLkpEntity.getPickListvalue());
										childVO.setCustTypePickListId(pickListLkpEntity.getPickListId());
									}
									childVO = addCommonFields(pickListLkupEntity, childVO, checkerStatusList,
											pickListLkpEntity, userMap);
							}
							
						}
						}
						
							listSystemRiskConfigDetailVO.add(childVO);
			}
			}
			}
		else if(AMLCDDConstants.PBOC_RISK_SCORE_AGE_CARD_PARAMS.equals(configDetailVO.getPickListType()) || AMLCDDConstants.PBOC_RISK_SCORE_AGE_CARD.equals(configDetailVO.getPickListType()))
			{
				List<PickListLkupStagingEntity> cardParamsEntityList = new ArrayList<>();
				List<PickListLkupStagingEntity> cardEntityList = new ArrayList<>();
				for(PickListLkupStagingEntity PickListLkupEntity:lstPickListLkupEntity){
						if((AMLCDDConstants.PBOC_RISK_SCORE_AGE_CARD_PARAMS).equals(PickListLkupEntity.getPickListType())){
						cardParamsEntityList.add(PickListLkupEntity);
						}
					else if((AMLCDDConstants.PBOC_RISK_SCORE_AGE_CARD).equals(PickListLkupEntity.getPickListType())){
						cardEntityList.add(PickListLkupEntity);
					}
				
					}
			Map<Object, List<PickListLkupStagingEntity>> pickListMap = cardParamsEntityList.stream().
			        collect(Collectors.groupingBy(p -> p.getParentPickListId()));
			if(!pickListMap.isEmpty()){
					//Parent iterate 
					for(PickListLkupStagingEntity pickListLkupEntity:cardEntityList){
						CountryRiskOverrideVO childVO = new CountryRiskOverrideVO();
							//Child iterate 
						if(null != pickListLkupEntity.getPickListId()){
							childVO.setParentPickListCode(pickListLkupEntity.getPickListCode().trim());
							childVO.setParentPickListType(pickListLkupEntity.getPickListType().trim());
							childVO.setParentPickListId(pickListLkupEntity.getPickListId());
							childVO.setRiskScore(pickListLkupEntity.getPickListvalue());
							childVO.setComments(configDetailVO.getComments());
							if(AMLCDDConstants.UPDATE_PENDING.equals(pickListLkupEntity.getAuthStatus()))
								childVO.setModifiedRiskScore(pickListLkupEntity.getPickListvalue());
							if(checkerStatusList.contains(pickListLkupEntity.getAuthStatus()))
								listPickListLkupEntity = pickListMap.get(pickListLkupEntity.getParentPickListId());
							else
								listPickListLkupEntity = pickListMap.get(pickListLkupEntity.getPickListId());
							if(listPickListLkupEntity != null){
							for(PickListLkupStagingEntity pickListLkpEntity : listPickListLkupEntity){
								if(AMLCDDConstants.AGE_MIN_CARD.equalsIgnoreCase(pickListLkpEntity.getPickListCode().trim())){
									childVO.setMinAge(pickListLkpEntity.getPickListvalue());
									childVO.setMinAgePickListId(pickListLkpEntity.getPickListId());
								}
								if(AMLCDDConstants.AGE_MAX_CARD.equalsIgnoreCase(pickListLkpEntity.getPickListCode().trim())){
									childVO.setMaxAge(pickListLkpEntity.getPickListvalue());
									childVO.setMaxAgePickListId(pickListLkpEntity.getPickListId());
								}
								if(AMLCDDConstants.CR_LIMIT_CARD.equalsIgnoreCase(pickListLkpEntity.getPickListCode().trim())){
									childVO.setCreditLimit(pickListLkpEntity.getPickListvalue());
									childVO.setPickListId(pickListLkpEntity.getPickListId());
								}
								if(AMLCDDConstants.CUST_TYPE_CARD.equalsIgnoreCase(pickListLkpEntity.getPickListCode().trim())){
									childVO.setCustType(pickListLkpEntity.getPickListvalue());
									childVO.setCustTypePickListId(pickListLkpEntity.getPickListId());
								}
								childVO = addCommonFields(pickListLkupEntity, childVO, checkerStatusList,
										pickListLkpEntity, userMap);
							}
							
							}
						}
						
							listSystemRiskConfigDetailVO.add(childVO);
			}
			}
			}
			else if(AMLCDDConstants.PBOC_RISK_SCORE_AGE_UPL_PARAMS.equals(configDetailVO.getPickListType()) || AMLCDDConstants.PBOC_RISK_SCORE_AGE_UPL.equals(configDetailVO.getPickListType()))
			{
				List<PickListLkupStagingEntity> uplParamsEntityList = new ArrayList<>();
				List<PickListLkupStagingEntity> uplEntityList = new ArrayList<>();
				for(PickListLkupStagingEntity PickListLkupEntity:lstPickListLkupEntity){
					if(AMLCDDConstants.PBOC_RISK_SCORE_AGE_UPL_PARAMS.equals(PickListLkupEntity.getPickListType())){
						uplParamsEntityList.add(PickListLkupEntity);
					}
					else if(AMLCDDConstants.PBOC_RISK_SCORE_AGE_UPL.equals(PickListLkupEntity.getPickListType())){
						uplEntityList.add(PickListLkupEntity);
					}
					}
			Map<Object, List<PickListLkupStagingEntity>> pickListMap = uplParamsEntityList.stream().collect(Collectors.groupingBy(p -> p.getParentPickListId()));
			if(!pickListMap.isEmpty()){
					//Parent iterate 
					for(PickListLkupStagingEntity pickListLkupEntity:uplEntityList){
						CountryRiskOverrideVO childVO = new CountryRiskOverrideVO();
							//Child iterate 
						if(null != pickListLkupEntity.getPickListId()){
							childVO.setParentPickListCode(pickListLkupEntity.getPickListCode().trim());
							childVO.setParentPickListType(pickListLkupEntity.getPickListType().trim());
							childVO.setParentPickListId(pickListLkupEntity.getPickListId());
							childVO.setRiskScore(pickListLkupEntity.getPickListvalue());
							childVO.setComments(configDetailVO.getComments());
							if(AMLCDDConstants.UPDATE_PENDING.equals(pickListLkupEntity.getAuthStatus()))
								childVO.setModifiedRiskScore(pickListLkupEntity.getPickListvalue());
							if(checkerStatusList.contains(pickListLkupEntity.getAuthStatus()))
								listPickListLkupEntity = pickListMap.get(pickListLkupEntity.getParentPickListId());
							else
								listPickListLkupEntity = pickListMap.get(pickListLkupEntity.getPickListId());
							if(listPickListLkupEntity != null){
							for(PickListLkupStagingEntity pickListLkpEntity : listPickListLkupEntity){
								if(AMLCDDConstants.AGE_MIN_UPL.equalsIgnoreCase(pickListLkpEntity.getPickListCode().trim())){
									childVO.setMinAge(pickListLkpEntity.getPickListvalue());
									childVO.setMinAgePickListId(pickListLkpEntity.getPickListId());
								}
								if(AMLCDDConstants.AGE_MAX_UPL.equalsIgnoreCase(pickListLkpEntity.getPickListCode().trim())){
									childVO.setMaxAge(pickListLkpEntity.getPickListvalue());
									childVO.setMaxAgePickListId(pickListLkpEntity.getPickListId());
								}
								if(AMLCDDConstants.LOAN_AMOUNT_UPL.equalsIgnoreCase(pickListLkpEntity.getPickListCode().trim())){
									childVO.setLoanAmount(pickListLkpEntity.getPickListvalue());
									childVO.setPickListId(pickListLkpEntity.getPickListId());
								}
								if(AMLCDDConstants.CUST_TYPE_UPL.equalsIgnoreCase(pickListLkpEntity.getPickListCode().trim())){
									childVO.setCustType(pickListLkpEntity.getPickListvalue());
									childVO.setCustTypePickListId(pickListLkpEntity.getPickListId());
								}
								childVO = addCommonFields(pickListLkupEntity, childVO, checkerStatusList,
										pickListLkpEntity, userMap);
							}
							
						}
						}
						
							listSystemRiskConfigDetailVO.add(childVO);
			}
			}
			}
		return listSystemRiskConfigDetailVO;
	}

	/**
	 * Method Name: addCommonFields
	 * Description: Method to perform <Details>
	 * @return void
	 * @param 
	 * 
	 */
	private CountryRiskOverrideVO addCommonFields(PickListLkupStagingEntity checkerEntity, CountryRiskOverrideVO childVO,
			List<String> checkerStatusList, PickListLkupStagingEntity makerEntity, Map<String, String> userMap) {
		if(checkerStatusList.contains(checkerEntity.getAuthStatus())){
			if(CommonUtility.isNotNull(checkerEntity.getAuthStatus()))
			childVO.setAuthStatus(checkerEntity.getAuthStatus());
			else
				childVO.setAuthStatus("-");
		if(checkerEntity.getModifiedDt() != null)
		//childVO.setLastUpdatedDate(new Timestamp(checkerEntity.getModifiedDt().getTime()));
		childVO.setLastUpdatedDate(CommonUtility.getFormatedDateWith24hrFmtTimeStamp(checkerEntity.getModifiedDt()));
		if(checkerEntity.getCreatedDt() != null)
		//childVO.setCreateDate(new Timestamp(checkerEntity.getCreatedDt().getTime()));
		childVO.setCreateDate(CommonUtility.getFormatedDateWith24hrFmtTimeStamp(checkerEntity.getCreatedDt()));
		String checkerCreatedBy = userMap.get(checkerEntity.getCreatedBy());
			if(CommonUtility.isNotNull(checkerCreatedBy)){
				childVO.setCreateId(checkerEntity.getCreatedBy());
				childVO.setCreatedBy(checkerCreatedBy);
			}
			else{
				childVO.setCreateId(checkerEntity.getCreatedBy());
				childVO.setCreatedBy(checkerEntity.getCreatedBy());
			}
			String checkerLastUpdatedBy = userMap.get(checkerEntity.getModifiedBy());
			if(CommonUtility.isNotNull(checkerLastUpdatedBy)){
				childVO.setLastUpdatedId(checkerEntity.getModifiedBy());
				childVO.setLastUpdatedBy(checkerLastUpdatedBy);
			}
				else{
					childVO.setLastUpdatedId(checkerEntity.getModifiedBy());
					childVO.setLastUpdatedBy(checkerEntity.getModifiedBy());
				}
			childVO.setPickListType(checkerEntity.getPickListType());
			childVO.setPickListId(checkerEntity.getPickListId());
}
else{
		if(CommonUtility.isNotNull(makerEntity.getAuthStatus()))
			childVO.setAuthStatus(makerEntity.getAuthStatus());
			else
				childVO.setAuthStatus("-");
		if(makerEntity.getModifiedDt() != null)
		//childVO.setLastUpdatedDate(new Timestamp(makerEntity.getModifiedDt().getTime()));
		childVO.setLastUpdatedDate(CommonUtility.getFormatedDateWith24hrFmtTimeStamp(makerEntity.getModifiedDt()));
		if(makerEntity.getCreatedDt() != null)
		//childVO.setCreateDate(new Timestamp(makerEntity.getCreatedDt().getTime()));
			childVO.setCreateDate(CommonUtility.getFormatedDateWith24hrFmtTimeStamp(makerEntity.getCreatedDt()));
		String makerCreatedBy = userMap.get(makerEntity.getCreatedBy());
			if(CommonUtility.isNotNull(makerCreatedBy)){
				childVO.setCreateId(makerEntity.getCreatedBy());
				childVO.setCreatedBy(makerCreatedBy);
			}
			else{
				childVO.setCreateId(makerEntity.getCreatedBy());
				childVO.setCreatedBy(makerEntity.getCreatedBy());
			}
			String makerLastUpdatedBy = userMap.get(makerEntity.getModifiedBy());
			if(CommonUtility.isNotNull(makerLastUpdatedBy)){
				childVO.setLastUpdatedId(makerEntity.getModifiedBy());
				childVO.setLastUpdatedBy(makerLastUpdatedBy);
			}
				else{
					childVO.setLastUpdatedId(makerEntity.getModifiedBy());
					childVO.setLastUpdatedBy(makerEntity.getModifiedBy());
				}
			childVO.setPickListType(makerEntity.getPickListType());
			childVO.setPickListId(makerEntity.getPickListId());
}
		return childVO;
	}
	
	
	/**
	 * Method Name: appendData
	 * Description: Method to add common properties to History
	 * @return CountryRiskOverrideVO
	 * @param 
	 * 
	 */
	private CountryRiskOverrideVO appendData(CountryRiskOverrideVO countryVO, PickListLkupStagingEntity pickListLkupEntity, Map<String,String> userMap)
	{
		logger.info("Inside the Class: CountryRiskOverrideServiceImpl ---> method: appendData");
		if(CommonUtility.isNotNull(pickListLkupEntity.getAuthStatus()))
			countryVO.setAuthStatus(pickListLkupEntity.getAuthStatus());
			else
				countryVO.setAuthStatus("-");
		if(pickListLkupEntity.getModifiedDt() != null)
			//countryVO.setLastUpdatedDate(new Timestamp(pickListLkupEntity.getModifiedDt().getTime()));
			countryVO.setLastUpdatedDate(CommonUtility.getFormatedDateWith24hrFmtTimeStamp(pickListLkupEntity.getModifiedDt()));
			if(pickListLkupEntity.getCreatedDt() != null)
			//countryVO.setCreateDate(new Timestamp(pickListLkupEntity.getCreatedDt().getTime()));
			countryVO.setCreateDate(CommonUtility.getFormatedDateWith24hrFmtTimeStamp(pickListLkupEntity.getCreatedDt()));
			if(CommonUtility.isNotNull(userMap.get(pickListLkupEntity.getCreatedBy()))){
			String createdBy = userMap.get(pickListLkupEntity.getCreatedBy());
			countryVO.setCreateId(pickListLkupEntity.getCreatedBy());
			countryVO.setCreatedBy(createdBy);
			}
			else{
				countryVO.setCreateId(pickListLkupEntity.getCreatedBy());
				countryVO.setCreatedBy(pickListLkupEntity.getCreatedBy());
			}
			if(CommonUtility.isNotNull(userMap.get(pickListLkupEntity.getModifiedBy()))){
				String lastUpdatedBy = userMap.get(pickListLkupEntity.getModifiedBy());
				countryVO.setLastUpdatedId(pickListLkupEntity.getModifiedBy());
				countryVO.setLastUpdatedBy(lastUpdatedBy);
			}
				else{
					countryVO.setLastUpdatedId(pickListLkupEntity.getModifiedBy());
					countryVO.setLastUpdatedBy(pickListLkupEntity.getModifiedBy());
				}
			countryVO.setPickListType(pickListLkupEntity.getPickListType());
			countryVO.setPickListId(pickListLkupEntity.getPickListId());
			logger.info("Inside the Class: CountryRiskOverrideServiceImpl ---> method: appendData");
			return countryVO;
	}


	/**
	 * Method Name: saveAuditLog
	 * Description: Method to save audit log
	 * @return void
	 * @param 
	 * 
	 */
	private void saveAuditLog(CountryRiskOverrideVO countryRiskOverrideVO,String roleId) {
		logger.info("Inside the Class: CountryRiskOverrideServiceImpl ---> method: saveAuditLog");
		CddBaseVO cddbaseVo = new CddBaseVO();
		cddbaseVo.setFormName(ScreenNameEnum.COUNTRY_RISK_OVERRIDE);
		cddbaseVo.setActionDoneByUser(countryRiskOverrideVO.getCreateId());
		cddbaseVo.setActionDoneByRole(roleId);
		cddbaseVo.setActionEvent(AuditLogActionEventEnum.COUNTRY_RISK_OVERRIDE_SUBMIT);
		auditLogService.saveCddAuditLog(cddbaseVo);
		logger.info("Inside the Class: CountryRiskOverrideServiceImpl ---> method: saveAuditLog");
	}

	/* (non-Javadoc)
	 * @see com.citigroup.amlcdd.risk.country.service.ICountryRiskOverrideService#getCheckerData()
	 */
	@Override
	public Map<String, List<CountryRiskOverrideVO>> getCheckerData(List<CountryRiskOverrideVO> countryRiskOverrideVOList, String pickListId) {
		logger.info("Inside the Class: CountryRiskOverrideServiceImpl ---> method: getCheckerData");
		List<String> pickListTypeList = new ArrayList<>();
		List<String> lstParentPickList = Arrays.asList(AMLCDDConstants.PBOC_RISK_SCORE_AGE_RETAIL, AMLCDDConstants.PBOC_RISK_SCORE_AGE_CARD, AMLCDDConstants.PBOC_RISK_SCORE_AGE_UPL);
		Map<String, List<CountryRiskOverrideVO>> map = new HashMap<String, List<CountryRiskOverrideVO>>();
		for(CountryRiskOverrideVO countryRiskOverrideVO: countryRiskOverrideVOList){
			pickListTypeList.add(countryRiskOverrideVO.getPickListType());
		}
		List<PickListLkupStagingEntity> listPickListLkupStagingEntity = riskOverRideDao.getCheckerData(pickListTypeList);
		CountryRiskOverrideVO countryRiskOverrideVO = null;
		List<String> statusList = Arrays.asList(AMLCDDConstants.ADD_PENDING, AMLCDDConstants.UPDATE_PENDING, AMLCDDConstants.DELETE_PENDING);
		listPickListLkupStagingEntity = listPickListLkupStagingEntity.stream().filter(p->statusList.contains(p.getAuthStatus())).collect(Collectors.toList());
		List<PickListLkupStagingEntity> lstPickListLkupStagingEntity = listPickListLkupStagingEntity;
		Map<String, String> userMap = getAllUsers();
		for(CountryRiskOverrideVO countryRiskOverrideVO2: countryRiskOverrideVOList){
			countryRiskOverrideVO = new CountryRiskOverrideVO();
			countryRiskOverrideVO.setPickListType(countryRiskOverrideVO2.getPickListType());
			List<CountryRiskOverrideVO> listSystemRiskConfigDetailVO = copyToCountryVO(countryRiskOverrideVO, lstPickListLkupStagingEntity, userMap);
			List<CountryRiskOverrideVO> updatedData = new ArrayList();
			if(null != listSystemRiskConfigDetailVO){
				for(CountryRiskOverrideVO vo : listSystemRiskConfigDetailVO){
					if(lstParentPickList.contains(vo.getParentPickListType()))
					{
						if(Long.parseLong(pickListId) == vo.getParentPickListId()){
							updatedData.add(vo);
						}
					}
					else if(Long.parseLong(pickListId) == vo.getPickListId()){
						updatedData.add(vo);
					}
				}
			}
			map.put(countryRiskOverrideVO.getPickListType(), updatedData);
			final CountryRiskOverrideVO countryRiskOverrideVO1 = countryRiskOverrideVO;
			lstPickListLkupStagingEntity = lstPickListLkupStagingEntity.stream().filter(p->!(p.getPickListType()).equalsIgnoreCase(countryRiskOverrideVO1.getPickListType())).collect(Collectors.toList());
		}
		
		logger.info("Inside the Class: CountryRiskOverrideServiceImpl ---> method: getCheckerData");
		return map;
		
	}

	/* (non-Javadoc)
	 * @see com.citigroup.amlcdd.risk.country.service.ICountryRiskOverrideService#checkerUpdate(java.util.List)
	 */
	@Override
	public List<PickListLkUpVO> updateChecker(List<CountryRiskOverrideVO> configDetailVOList,String language, String userName, String makerLastUpdatedId,String roleId) {
		logger.info("Inside the Class: CountryRiskOverrideServiceImpl ---> method: updateChecker");
		Long pickListId = null;
		String createId = null;
		String lastUpdatedId = null;
		Date createdDate = null;
		String country = null;
		String date[] = null;
		List<CountryRiskOverrideVO> countryVOList = new ArrayList<>();
		List<PickListLkupStagingEntity> lstPickListLkupStgEntity = new ArrayList<>();
		List<PickListLkUpVO> pickListLkupVOLst = new ArrayList<>();
		List<String> approvedList = Arrays.asList(AMLCDDConstants.ADD_APPROVED, AMLCDDConstants.UPDATE_APPROVED, AMLCDDConstants.DELETE_APPROVED);
		List<String> rejectedList = Arrays.asList(AMLCDDConstants.ADD_REJECTED, AMLCDDConstants.UPDATE_REJECTED, AMLCDDConstants.DELETE_REJECTED);
		List<String> pickListTypeList = Arrays.asList(AMLCDDConstants.PBOC_RISK_SCORE_MODE_OF_ACCT_CARD, AMLCDDConstants.PBOC_RISK_SCORE_IND_ID_TYPE, AMLCDDConstants.PBOC_RISK_SCORE_AGE_RETAIL, AMLCDDConstants.PBOC_RISK_SCORE_AGE_CARD, AMLCDDConstants.PBOC_RISK_SCORE_AGE_UPL);
		for(CountryRiskOverrideVO countryRiskOverrideVO: configDetailVOList)
		{
			List<PickListLkupStagingEntity> pickListLkupStgEntityList = addToStaging(countryRiskOverrideVO,language);
			for(PickListLkupStagingEntity pickListLkupStagingEntity:pickListLkupStgEntityList){
				pickListLkupStagingEntity.setAuthStatus(countryRiskOverrideVO.getAuthStatus());
				pickListLkupStagingEntity.setCreatedBy(userName);
				if(pickListTypeList.contains(pickListLkupStagingEntity.getPickListType())){
				pickListLkupStagingEntity.setPickListvalue(countryRiskOverrideVO.getModifiedRiskScore());
				if((AMLCDDConstants.DELETE_APPROVED.equals(countryRiskOverrideVO.getAuthStatus())) || (AMLCDDConstants.DELETE_REJECTED.equals(countryRiskOverrideVO.getAuthStatus()))){
						pickListLkupStagingEntity.setPickListvalue(countryRiskOverrideVO.getRiskScore());
				}
				if((AMLCDDConstants.ADD_APPROVED.equals(pickListLkupStagingEntity.getAuthStatus())) || (AMLCDDConstants.ADD_REJECTED.equals(pickListLkupStagingEntity.getAuthStatus()))){
					pickListLkupStagingEntity.setPickListvalue(countryRiskOverrideVO.getRiskScore());
				}
				}
				lstPickListLkupStgEntity.add(pickListLkupStagingEntity);
				
			}
			createId = countryRiskOverrideVO.getCreateId();
			lastUpdatedId = countryRiskOverrideVO.getLastUpdatedId();
			if(CommonUtility.isNotNull(countryRiskOverrideVO.getCreateDate())){
				if(countryRiskOverrideVO.getCreateDate().contains("/")){
				 date = countryRiskOverrideVO.getCreateDate().split("/");
				}
				else if(countryRiskOverrideVO.getCreateDate().contains("-")){
					 date = countryRiskOverrideVO.getCreateDate().split("-");
				}
				countryRiskOverrideVO.setCreateDate(date[2].split(" ")[0]+"-"+date[0]+"-"+date[1]+" "+date[2].split(" ")[1]+".0");
			}
			createdDate = CommonUtility.parseDateSepatedSlash(countryRiskOverrideVO.getCreateDate());
			country = countryRiskOverrideVO.getCountry();
			
		}
		PickListLkupEntity pickListLkupEntity =null;
		List<PickListLkupStagingEntity> lstPickListLkupStagingEntity = riskOverRideDao.updateCountryRiskOverride(lstPickListLkupStgEntity);
		
		List<PickListLkupEntity> lstPickListLkupEntity = new ArrayList<>();
		for (PickListLkupStagingEntity pickListLkupStagingEntity : lstPickListLkupStgEntity) {
			pickListLkupEntity = new PickListLkupEntity();
			BeanUtils.copyProperties(pickListLkupStagingEntity, pickListLkupEntity);
			pickListLkupEntity.setCreatedBy(createId);
			pickListLkupEntity.setCreatedDt(createdDate);
			if(pickListTypeList.contains(pickListLkupEntity.getPickListType()))
			pickListLkupEntity.setRiskrating(getRiskRatingRiskScore(pickListLkupStagingEntity.getPickListvalue()));
			if(rejectedList.contains(pickListLkupEntity.getAuthStatus())){
			pickListLkupEntity.setModifiedBy(makerLastUpdatedId);
			}
			lstPickListLkupEntity.add(pickListLkupEntity);
		}
		
		List<PickListLkupEntity> pickListLkupEntityLst = riskOverRideDao.updateChecker(lstPickListLkupEntity);
		Map<String, String> userMap = getAllUsers();
		for(CountryRiskOverrideVO countryVO :configDetailVOList){
		countryVOList = copyToCountryVO(countryVO, lstPickListLkupStagingEntity, userMap);
		}
		for(CountryRiskOverrideVO countryRiskOverrideVO:countryVOList){
			countryRiskOverrideVO.setCreateId(createId);
			countryRiskOverrideVO.setLastUpdatedId(lastUpdatedId);
			countryRiskOverrideVO.setCountry(country);
			saveAuditLog(countryRiskOverrideVO,roleId);
			riskOverRideDao.updateComments(countryRiskOverrideVO);
			}
		List<PickListLkUpVO> lstPickListLkupVO = copyPickListLkupEntityToVO(pickListLkupEntityLst);
		for(PickListLkUpVO pickListLkUpVO :lstPickListLkupVO){
			if(AMLCDDConstants.APPROVED.equals(pickListLkUpVO.getAuthStatus())){
				pickListLkupVOLst.add(pickListLkUpVO);
			}
			else if((AMLCDDConstants.UPDATE_APPROVED).equals(pickListLkUpVO.getAuthStatus()) || (AMLCDDConstants.INACTIVE).equals(pickListLkUpVO.getAuthStatus()) || (AMLCDDConstants.DELETE_APPROVED).equals(pickListLkUpVO.getAuthStatus())){
				if(pickListTypeList.contains(pickListLkUpVO.getPickListType())){
					pickListLkupVOLst.add(pickListLkUpVO);
				}
			}
		}
		for(CountryRiskOverrideVO countryRiskOverrideVO :configDetailVOList){
                  if(approvedList.contains(countryRiskOverrideVO.getAuthStatus()))
                  doUserAction(countryRiskOverrideVO, WorkflowConstant.COMPLCHECKER, UserMntnceUserAction.APPROVE, userName);
                  else if(rejectedList.contains(countryRiskOverrideVO.getAuthStatus()))
                         doUserAction(countryRiskOverrideVO, WorkflowConstant.COMPLCHECKER, UserMntnceUserAction.REJECT, userName);
     }

		//amlCddCacheUtil.updatePickListCache(language, Arrays.asList(AMLCDDConstants.COUNTRY_OVRRIDE_PICK_LIST_TYPES), pickListLkupVOLst);
		logger.info("Exits the Class: CountryRiskOverrideServiceImpl ---> method: updateChecker");
		return lstPickListLkupVO;
	}

	
	/* (non-Javadoc)
	 * @see com.citigroup.amlcdd.risk.country.service.ICountryRiskOverrideService#getInitialModifiedMakerData()
	 */
	public List<CountryRiskOverrideVO> getInitialModifiedMakerData(Map<String, String> userMap) {
		logger.info("Inside the Class: CountryRiskOverrideServiceImpl ---> method: getInitialModifiedMakerData");
		CountryRiskOverrideVO countryRiskOverrideVO = null;
		List<CountryRiskOverrideVO> countryRiskOverrideVOLst = new ArrayList<>();
		List<PickListLkupStagingEntity> pickListLkupStagingEntityLst = new ArrayList<>();
		List<PickListLkupStagingEntity> pickListLkupStgEntityLst = new ArrayList<>();
		List<PickListLkupStagingEntity> lstPickListLkupStagingEntity = riskOverRideDao.getInitialModifiedMakerData();
		List<CountryRiskOverrideVO> lstCountryVO = new ArrayList<>();
		List<String> statusList = Arrays.asList(AMLCDDConstants.UPDATE_PENDING, AMLCDDConstants.DELETE_PENDING);
		List<String> lstPickListType = Arrays.asList(AMLCDDConstants.PBOC_RISK_SCORE_MODE_OF_ACCT_CARD, AMLCDDConstants.PBOC_RISK_SCORE_IND_ID_TYPE, AMLCDDConstants.PBOC_RISK_SCORE_AGE_RETAIL, AMLCDDConstants.PBOC_RISK_SCORE_AGE_CARD, AMLCDDConstants.PBOC_RISK_SCORE_AGE_UPL);
		pickListLkupStgEntityLst = lstPickListLkupStagingEntity.stream().filter(p->statusList.contains(p.getAuthStatus())).collect(Collectors.toList());
		pickListLkupStagingEntityLst = lstPickListLkupStagingEntity.stream().filter(p->AMLCDDConstants.ADD_PENDING.equals(p.getAuthStatus())).collect(Collectors.toList());
		if(pickListLkupStagingEntityLst.size() != 0){
			CountryRiskOverrideVO countryVO =new CountryRiskOverrideVO();
			for(String pickList :lstPickListType){
				countryVO.setPickListType(pickList);
				lstCountryVO = copyToCountryVO(countryVO, pickListLkupStagingEntityLst, userMap);
				for(CountryRiskOverrideVO countryOverrideVO :lstCountryVO){
					countryRiskOverrideVOLst.add(countryOverrideVO);
				}
			}
		}
		if(pickListLkupStgEntityLst.size() != 0){
		for(PickListLkupStagingEntity pickListLkupStagingEntity :pickListLkupStgEntityLst){
			String lastUpdatedBy = userMap.get(pickListLkupStagingEntity.getModifiedBy());
			String createdBy = userMap.get(pickListLkupStagingEntity.getCreatedBy());
				if((AMLCDDConstants.PBOC_RISK_SCORE_MODE_OF_ACCT_CARD).equals(pickListLkupStagingEntity.getPickListType())){
				countryRiskOverrideVO = new CountryRiskOverrideVO();
				countryRiskOverrideVO.setModifiedRiskScore(pickListLkupStagingEntity.getPickListvalue());
				countryRiskOverrideVO.setModifiedWorkflowStatus(pickListLkupStagingEntity.getAuthStatus());
				countryRiskOverrideVO.setPickListType(pickListLkupStagingEntity.getPickListType());
				countryRiskOverrideVO.setPickListCode(pickListLkupStagingEntity.getPickListCode().trim());
				countryRiskOverrideVO.setModeOfAccountOpening(pickListLkupStagingEntity.getPickListCode().trim());
				if(pickListLkupStagingEntity.getModifiedDt() != null){
				countryRiskOverrideVO.setLastUpdatedDate(CommonUtility.getFormatedDateWith24hrFmtTimeStamp(pickListLkupStagingEntity.getModifiedDt()));
				}
				countryRiskOverrideVO.setLastUpdatedId(pickListLkupStagingEntity.getModifiedBy());
				countryRiskOverrideVO.setLastUpdatedBy(lastUpdatedBy);
			}
				else if((AMLCDDConstants.PBOC_RISK_SCORE_IND_ID_TYPE).equals(pickListLkupStagingEntity.getPickListType())){
				countryRiskOverrideVO = new CountryRiskOverrideVO();
				countryRiskOverrideVO.setModifiedRiskScore(pickListLkupStagingEntity.getPickListvalue());
				countryRiskOverrideVO.setModifiedWorkflowStatus(pickListLkupStagingEntity.getAuthStatus());
				countryRiskOverrideVO.setPickListType(pickListLkupStagingEntity.getPickListType());
				countryRiskOverrideVO.setPickListCode(pickListLkupStagingEntity.getPickListCode().trim());
				countryRiskOverrideVO.setIdType(pickListLkupStagingEntity.getPickListCode().trim());
				if(pickListLkupStagingEntity.getModifiedDt() != null){
				countryRiskOverrideVO.setLastUpdatedDate(CommonUtility.getFormatedDateWith24hrFmtTimeStamp(pickListLkupStagingEntity.getModifiedDt()));
				}
				countryRiskOverrideVO.setLastUpdatedId(pickListLkupStagingEntity.getModifiedBy());
				countryRiskOverrideVO.setLastUpdatedBy(lastUpdatedBy);
			}
				else if((AMLCDDConstants.PBOC_RISK_SCORE_AGE_RETAIL_PARAMS).equals(pickListLkupStagingEntity.getPickListType()) || (AMLCDDConstants.PBOC_RISK_SCORE_AGE_RETAIL).equals(pickListLkupStagingEntity.getPickListType())){
				countryRiskOverrideVO = new CountryRiskOverrideVO();
					if((AMLCDDConstants.PBOC_RISK_SCORE_AGE_RETAIL_PARAMS).equals(pickListLkupStagingEntity.getPickListType())){
				countryRiskOverrideVO.setPickListType(pickListLkupStagingEntity.getPickListType());
				countryRiskOverrideVO.setPickListCode(pickListLkupStagingEntity.getPickListCode().trim());
				if(pickListLkupStagingEntity.getModifiedDt() != null){
				countryRiskOverrideVO.setLastUpdatedDate(CommonUtility.getFormatedDateWith24hrFmtTimeStamp(pickListLkupStagingEntity.getModifiedDt()));
				}
				countryRiskOverrideVO.setLastUpdatedId(pickListLkupStagingEntity.getModifiedBy());
				countryRiskOverrideVO.setLastUpdatedBy(lastUpdatedBy);
				}
				else{
				countryRiskOverrideVO.setPickListType(pickListLkupStagingEntity.getPickListType());
				countryRiskOverrideVO.setPickListCode(pickListLkupStagingEntity.getPickListCode().trim());
				if(pickListLkupStagingEntity.getModifiedDt() != null)
				countryRiskOverrideVO.setLastUpdatedDate(CommonUtility.getFormatedDateWith24hrFmtTimeStamp(pickListLkupStagingEntity.getModifiedDt()));
				countryRiskOverrideVO.setParentPickListCode(pickListLkupStagingEntity.getPickListCode().trim());
				countryRiskOverrideVO.setModifiedRiskScore(pickListLkupStagingEntity.getPickListvalue());
				countryRiskOverrideVO.setModifiedWorkflowStatus(pickListLkupStagingEntity.getAuthStatus());
				countryRiskOverrideVO.setLastUpdatedId(pickListLkupStagingEntity.getModifiedBy());
				countryRiskOverrideVO.setLastUpdatedBy(lastUpdatedBy);
				}
			}
				else if((AMLCDDConstants.PBOC_RISK_SCORE_AGE_CARD_PARAMS).equals(pickListLkupStagingEntity.getPickListType()) || (AMLCDDConstants.PBOC_RISK_SCORE_AGE_CARD).equals(pickListLkupStagingEntity.getPickListType())){
				countryRiskOverrideVO = new CountryRiskOverrideVO();
					if((AMLCDDConstants.PBOC_RISK_SCORE_AGE_CARD_PARAMS).equals(pickListLkupStagingEntity.getPickListType())){
				countryRiskOverrideVO.setModifiedRiskScore(pickListLkupStagingEntity.getPickListvalue());
				countryRiskOverrideVO.setModifiedWorkflowStatus(pickListLkupStagingEntity.getAuthStatus());
				countryRiskOverrideVO.setPickListType(pickListLkupStagingEntity.getPickListType());
				countryRiskOverrideVO.setPickListCode(pickListLkupStagingEntity.getPickListCode().trim());
				if(pickListLkupStagingEntity.getModifiedDt() != null)
				countryRiskOverrideVO.setLastUpdatedDate(CommonUtility.getFormatedDateWith24hrFmtTimeStamp(pickListLkupStagingEntity.getModifiedDt()));
				countryRiskOverrideVO.setLastUpdatedId(pickListLkupStagingEntity.getModifiedBy());
				countryRiskOverrideVO.setLastUpdatedBy(lastUpdatedBy);
				}
				else{
					countryRiskOverrideVO.setParentPickListCode(pickListLkupStagingEntity.getPickListCode().trim());
					countryRiskOverrideVO.setModifiedRiskScore(pickListLkupStagingEntity.getPickListvalue());
					countryRiskOverrideVO.setModifiedWorkflowStatus(pickListLkupStagingEntity.getAuthStatus());
					countryRiskOverrideVO.setPickListType(pickListLkupStagingEntity.getPickListType());
					countryRiskOverrideVO.setPickListCode(pickListLkupStagingEntity.getPickListCode().trim());
					if(pickListLkupStagingEntity.getModifiedDt() != null)
					countryRiskOverrideVO.setLastUpdatedDate(CommonUtility.getFormatedDateWith24hrFmtTimeStamp(pickListLkupStagingEntity.getModifiedDt()));
					countryRiskOverrideVO.setLastUpdatedId(pickListLkupStagingEntity.getModifiedBy());
					countryRiskOverrideVO.setLastUpdatedBy(lastUpdatedBy);
				}
			}
				else if((AMLCDDConstants.PBOC_RISK_SCORE_AGE_UPL_PARAMS).equals(pickListLkupStagingEntity.getPickListType()) || (AMLCDDConstants.PBOC_RISK_SCORE_AGE_UPL).equals(pickListLkupStagingEntity.getPickListType())){
				countryRiskOverrideVO = new CountryRiskOverrideVO();
					if((AMLCDDConstants.PBOC_RISK_SCORE_AGE_UPL_PARAMS).equals(pickListLkupStagingEntity.getPickListType())){
				countryRiskOverrideVO.setModifiedRiskScore(pickListLkupStagingEntity.getPickListvalue());
				countryRiskOverrideVO.setModifiedWorkflowStatus(pickListLkupStagingEntity.getAuthStatus());
				countryRiskOverrideVO.setPickListType(pickListLkupStagingEntity.getPickListType());
				countryRiskOverrideVO.setPickListCode(pickListLkupStagingEntity.getPickListCode().trim());
				if(pickListLkupStagingEntity.getModifiedDt() != null)
				countryRiskOverrideVO.setLastUpdatedDate(CommonUtility.getFormatedDateWith24hrFmtTimeStamp(pickListLkupStagingEntity.getModifiedDt()));
				countryRiskOverrideVO.setLastUpdatedId(pickListLkupStagingEntity.getModifiedBy());
				countryRiskOverrideVO.setLastUpdatedBy(lastUpdatedBy);
				}
				else{
					countryRiskOverrideVO.setParentPickListCode(pickListLkupStagingEntity.getPickListCode().trim());
					countryRiskOverrideVO.setModifiedRiskScore(pickListLkupStagingEntity.getPickListvalue());
					countryRiskOverrideVO.setModifiedWorkflowStatus(pickListLkupStagingEntity.getAuthStatus());
					countryRiskOverrideVO.setPickListType(pickListLkupStagingEntity.getPickListType());
					countryRiskOverrideVO.setPickListCode(pickListLkupStagingEntity.getPickListCode().trim());
					if(pickListLkupStagingEntity.getModifiedDt() != null)
					countryRiskOverrideVO.setLastUpdatedDate(CommonUtility.getFormatedDateWith24hrFmtTimeStamp(pickListLkupStagingEntity.getModifiedDt()));
					countryRiskOverrideVO.setLastUpdatedId(pickListLkupStagingEntity.getModifiedBy());
					countryRiskOverrideVO.setLastUpdatedBy(lastUpdatedBy);
				}
			}
			countryRiskOverrideVOLst.add(countryRiskOverrideVO);
		}
		
		}
		logger.info("Exits the Class: CountryRiskOverrideServiceImpl ---> method: getInitialModifiedMakerData");
		return countryRiskOverrideVOLst;
	}
	
	/* (non-Javadoc)
	 * @see com.citigroup.amlcdd.risk.country.service.ICountryRiskOverrideService#getInitMakerRiskScoreData()
	 */
	public List<CountryRiskOverrideVO> getInitMakerRiskScoreData(Map<String, String> userMap) {
		logger.info("Inside the Class: CountryRiskOverrideServiceImpl ---> method: getInitMakerRiskScoreData");
		CountryRiskOverrideVO countryRiskOverrideVO = null;
		List<CountryRiskOverrideVO> countryRiskOverrideVOLst = new ArrayList<>();
		List<PickListLkupEntity> lstPickListLkupEntity = new ArrayList<>();
		lstPickListLkupEntity = riskOverRideDao.getInitMakerRiskScoreData();
		for(PickListLkupEntity pickListLkupEntity :lstPickListLkupEntity){
			countryRiskOverrideVO = new CountryRiskOverrideVO();
			countryRiskOverrideVO.setPickListCode(pickListLkupEntity.getPickListCode());
			countryRiskOverrideVO.setRiskScore(pickListLkupEntity.getPickListvalue());
			countryRiskOverrideVO.setPickListType(pickListLkupEntity.getPickListType());
			countryRiskOverrideVO.setLastUpdatedDate(CommonUtility.getFormatedDateWith24hrFmtTimeStamp(pickListLkupEntity.getModifiedDt()));
			countryRiskOverrideVO.setLastUpdatedId(pickListLkupEntity.getModifiedBy());
			countryRiskOverrideVO.setLastUpdatedBy(userMap.get(pickListLkupEntity.getModifiedBy()));
			countryRiskOverrideVO.setCreateDate(CommonUtility.getFormatedDateWith24hrFmtTimeStamp(pickListLkupEntity.getCreatedDt()));
			countryRiskOverrideVO.setCreateId(pickListLkupEntity.getCreatedBy());
			countryRiskOverrideVO.setCreatedBy(userMap.get(pickListLkupEntity.getCreatedBy()));
			countryRiskOverrideVO.setAuthStatus(pickListLkupEntity.getAuthStatus());
			countryRiskOverrideVOLst.add(countryRiskOverrideVO);
		}
		logger.info("Exits the Class: CountryRiskOverrideServiceImpl ---> method: getInitMakerRiskScoreData");
		return countryRiskOverrideVOLst;
	}
	
	/**
	 * Method Name: copyPickListLkupEntityToVO
	 * Description: Method to perform copy Entity to VO
	 * @return List<PickListLkUpVO>
	 * @param 
	 * 
	 */
	private List<PickListLkUpVO> copyPickListLkupEntityToVO(List<PickListLkupEntity> pickListLkupEntityLst){
		logger.info("Inside the Class: CountryRiskOverrideServiceImpl ---> method: copyPickListLkupEntityToVO");
		List<PickListLkUpVO> pickListDetails = null;
		pickListDetails = new ArrayList<PickListLkUpVO>();
		for (PickListLkupEntity pickListLkupEntity : pickListLkupEntityLst) {
				PickListLkUpVO pickListLkUpVO = new PickListLkUpVO();
				pickListLkUpVO.setPickListType(pickListLkupEntity.getPickListType());
				pickListLkUpVO.setCode(pickListLkupEntity.getPickListCode());
				pickListLkUpVO.setPickListvalue(pickListLkupEntity.getPickListvalue());
				pickListLkUpVO.setPickListDesc(pickListLkupEntity.getPickListDesc());
				pickListLkUpVO.setPickListId(pickListLkupEntity.getPickListId());
				pickListLkUpVO.setParentPickListId(pickListLkupEntity.getParentPickListId());
				pickListLkUpVO.setCreateId(pickListLkupEntity.getCreatedBy());
				pickListLkUpVO.setCreatedDate(pickListLkupEntity.getCreatedDt());
				pickListLkUpVO.setLastUpdatedDate(pickListLkupEntity.getModifiedDt());
				pickListLkUpVO.setLastUpdatedId(pickListLkupEntity.getModifiedBy());
				pickListLkUpVO.setAuthStatus(pickListLkupEntity.getAuthStatus());
				pickListDetails.add(pickListLkUpVO);
			}
		logger.info("Exits the Class: CountryRiskOverrideServiceImpl ---> method: copyPickListLkupEntityToVO");
		return pickListDetails;
		
	}
	
	/**
	 * Method Name: startJBPMWorkflow
	 * Description: Method to perform <Details>
	 * @return void
	 * @param 
	 * 
	 */
	public void startJBPMWorkflow(CountryRiskOverrideVO countryRiskOverrideVO, String systemRole, WorkflowConstant.ConfigType configType, String userId) throws Exception {
		logger.info("Inside the Class: CountryRiskOverrideServiceImpl ---> method: startJBPMWorkflow");
		List<String> lstChildPickList = Arrays.asList(AMLCDDConstants.PBOC_RISK_SCORE_AGE_RETAIL_PARAMS, AMLCDDConstants.PBOC_RISK_SCORE_AGE_CARD_PARAMS, AMLCDDConstants.PBOC_RISK_SCORE_AGE_UPL_PARAMS);
		WorkflowResponseUserMntnc response =null;
		UserMntnceWorkflowParamVo userMntnceWorkflowParamVo = new UserMntnceWorkflowParamVo();
		userMntnceWorkflowParamVo.setUserId(userId);
		if(lstChildPickList.contains(countryRiskOverrideVO.getPickListType()))
		userMntnceWorkflowParamVo.setRequestNbr(Long.toString(countryRiskOverrideVO.getParentPickListId()));
		else
		userMntnceWorkflowParamVo.setRequestNbr(Long.toString(countryRiskOverrideVO.getPickListId()));
		userMntnceWorkflowParamVo.setAssignee(userId);
		userMntnceWorkflowParamVo.setSystemRole(systemRole);
		userMntnceWorkflowParamVo.setWorkItemType(ConfigType.COUNTRY_OVERRIDE);
		response = userMaintananceServices.startWorkflow(userMntnceWorkflowParamVo, configType);
		if (response != null) {
			List<KycTask> taskList = response.getKycTaskList();
			KycTask kycTask = taskList.get(0);
			if(kycTask!=null && kycTask.getWorkItemStatus()!=null){
				logger.info("WorkItemStatus "+kycTask.getWorkItemStatus());
				logger.info("Record initiated");
				logger.info("Notification Service Called");
			}
		}
		logger.info("Exits the Class: CountryRiskOverrideServiceImpl ---> method: startJBPMWorkflow");
	}
	
	public void doUserAction(CountryRiskOverrideVO countryRiskOverrideVO, String systemRole, UserMntnceUserAction userAction, String userName) {
		logger.info("Inside the Class: CountryRiskOverrideServiceImpl ---> method: doUserAction");
		List<String> lstChildPickList = Arrays.asList(AMLCDDConstants.PBOC_RISK_SCORE_AGE_RETAIL_PARAMS, AMLCDDConstants.PBOC_RISK_SCORE_AGE_CARD_PARAMS, AMLCDDConstants.PBOC_RISK_SCORE_AGE_UPL_PARAMS);
		WorkflowResponseUserMntnc response =null;
		UserMntnceWorkflowParamVo userMntnceWorkflowParamVo = new UserMntnceWorkflowParamVo();
		userMntnceWorkflowParamVo.setUserId(userName);
		if(lstChildPickList.contains(countryRiskOverrideVO.getPickListType()))
			userMntnceWorkflowParamVo.setRequestNbr(Long.toString(countryRiskOverrideVO.getParentPickListId()));
			else
		userMntnceWorkflowParamVo.setRequestNbr(Long.toString(countryRiskOverrideVO.getPickListId()));
		userMntnceWorkflowParamVo.setAssignee(countryRiskOverrideVO.getCreateId());
		userMntnceWorkflowParamVo.setSystemRole(systemRole);
		userMntnceWorkflowParamVo.setWorkItemType(ConfigType.COUNTRY_OVERRIDE);
		userMaintananceServices.doUserAction(userMntnceWorkflowParamVo, userAction);
		logger.info("Exits the Class: CountryRiskOverrideServiceImpl ---> method: doUserAction");
	}

	/* (non-Javadoc)
	 * @see com.citigroup.amlcdd.risk.country.service.ICountryRiskOverrideService#validatePickListCode(com.citigroup.amlcdd.risk.country.vo.CountryRiskOverrideVO)
	 */
	@Override
	public Boolean getValidatePickListCode(CountryRiskOverrideVO configDetailVO) {
		logger.info("Inside the Class: CountryRiskOverrideServiceImpl ---> method: getValidatePickListCode");
		PickListLkupStagingEntity pickListLkupStagingEntity = new PickListLkupStagingEntity();
		pickListLkupStagingEntity.setPickListType(configDetailVO.getPickListType());
		List<String> pickListTypeLst = new ArrayList<>();
		pickListTypeLst.add(configDetailVO.getPickListType());
		if(CommonUtility.isNotNull(configDetailVO.getParentPickListType()))
			pickListTypeLst.add(configDetailVO.getParentPickListType());
		List<PickListLkupStagingEntity> pickListLkupStagingEntityList  = riskOverRideDao.getCheckerData(pickListTypeLst);
		if(pickListLkupStagingEntityList.size()>0){
			Map<String, String> userMap = getAllUsers();
			List<CountryRiskOverrideVO> countryVOList = copyToCountryVO(configDetailVO, pickListLkupStagingEntityList, userMap);
			if(AMLCDDConstants.PBOC_RISK_SCORE_MODE_OF_ACCT_CARD.equals(configDetailVO.getPickListType())){
			pickListLkupStagingEntityList = pickListLkupStagingEntityList.stream().filter(p->(configDetailVO.getModeOfAccountOpening()).equals(p.getPickListCode())).collect(Collectors.toList());
			if(pickListLkupStagingEntityList.size()>0)
				return true;
			}
			else if(AMLCDDConstants.PBOC_RISK_SCORE_IND_ID_TYPE.equals(configDetailVO.getPickListType())){
				pickListLkupStagingEntityList = pickListLkupStagingEntityList.stream().filter(p->(configDetailVO.getIdType()).equals(p.getPickListCode())).collect(Collectors.toList());
				if(pickListLkupStagingEntityList.size()>0)
					return true;
			}
			else if(AMLCDDConstants.PBOC_RISK_SCORE_AGE_RETAIL_PARAMS.equals(configDetailVO.getPickListType())){
				for(CountryRiskOverrideVO countryRiskOverrideVO :countryVOList){
					if((configDetailVO.getHighRelationShipBalance().equals(countryRiskOverrideVO.getHighRelationShipBalance())) && (configDetailVO.getMinAge().equals(countryRiskOverrideVO.getMinAge())) && (configDetailVO.getMaxAge().equals(countryRiskOverrideVO.getMaxAge())) && (configDetailVO.getCustType().equals(countryRiskOverrideVO.getCustType()))){
						return true;
					}
				}
			}
			else if(AMLCDDConstants.PBOC_RISK_SCORE_AGE_CARD_PARAMS.equals(configDetailVO.getPickListType())){
				for(CountryRiskOverrideVO countryRiskOverrideVO :countryVOList){
					if((configDetailVO.getCreditLimit().equals(countryRiskOverrideVO.getCreditLimit())) && (configDetailVO.getMinAge().equals(countryRiskOverrideVO.getMinAge())) && (configDetailVO.getMaxAge().equals(countryRiskOverrideVO.getMaxAge())) && (configDetailVO.getCustType().equals(countryRiskOverrideVO.getCustType()))){
						return true;
					}
				}
			}
			else if(AMLCDDConstants.PBOC_RISK_SCORE_AGE_UPL_PARAMS.equals(configDetailVO.getPickListType())){
				for(CountryRiskOverrideVO countryRiskOverrideVO :countryVOList){
					if((configDetailVO.getLoanAmount().equals(countryRiskOverrideVO.getLoanAmount())) && (configDetailVO.getMinAge().equals(countryRiskOverrideVO.getMinAge())) && (configDetailVO.getMaxAge().equals(countryRiskOverrideVO.getMaxAge()))){
						return true;
					}
				}
			}
	}
		logger.info("Exits the Class: CountryRiskOverrideServiceImpl ---> method: getValidatePickListCode");
		return false;
	}
	
	
	/**
	 * Method Name: getUserNameById
	 * Description: Method to perform <Details>
	 * @return String
	 * @param 
	 * 
	 */
	@Override
	public Map<String, String> getAllUsers(){
		logger.info("Inside the Class: CountryRiskOverrideServiceImpl ---> method: getAllUsers");
		return riskOverRideDao.getAllUsers();
	}
	
	@Override
	public List<PickListLkUpVO> updateCache(String country, String language, List<PickListLkUpVO> pickListLkupVOLst){
		List<PickListLkupStagingEntity> pickLstEntityLst = null;
		List<PickListLkupEntity> lstPickListLkupEntity =  new ArrayList();
		List<PickListLkUpVO> pickListLkupVOList = new ArrayList();
		List<String> pickListTypeList = Arrays.asList(AMLCDDConstants.PBOC_RISK_SCORE_MODE_OF_ACCT_CARD, AMLCDDConstants.PBOC_RISK_SCORE_IND_ID_TYPE, AMLCDDConstants.PBOC_RISK_SCORE_AGE_RETAIL, AMLCDDConstants.PBOC_RISK_SCORE_AGE_CARD, AMLCDDConstants.PBOC_RISK_SCORE_AGE_UPL);
		for(PickListLkUpVO pickListLkUpVO :pickListLkupVOLst){
			PickListLkupEntity pickListLkupEntity = new PickListLkupEntity();
			BeanUtils.copyProperties(pickListLkUpVO, pickListLkupEntity);
			pickListLkupEntity.setPickListCode(pickListLkUpVO.getCode());
			pickListLkupEntity.setModifiedBy(pickListLkUpVO.getLastUpdatedId());
			pickListLkupEntity.setModifiedDt(pickListLkUpVO.getLastUpdatedDate());
			lstPickListLkupEntity.add(pickListLkupEntity);
		}
		List<PickListLkupEntity> pickListLkupEntityLst= riskOverRideDao.getPickListLkupCacheData(lstPickListLkupEntity);
		List<PickListLkUpVO> lstPickListLkupVO = copyPickListLkupEntityToVO(pickListLkupEntityLst);
		for(PickListLkUpVO pickListLkUpVO :lstPickListLkupVO){
			if(AMLCDDConstants.APPROVED.equals(pickListLkUpVO.getAuthStatus())){
				pickListLkupVOList.add(pickListLkUpVO);
			}
			else if((AMLCDDConstants.UPDATE_APPROVED).equals(pickListLkUpVO.getAuthStatus()) || (AMLCDDConstants.INACTIVE).equals(pickListLkUpVO.getAuthStatus()) || (AMLCDDConstants.DELETE_APPROVED).equals(pickListLkUpVO.getAuthStatus())){
				if(pickListTypeList.contains(pickListLkUpVO.getPickListType())){
					pickListLkupVOList.add(pickListLkUpVO);
				}
			}
		}
		
		amlCddCacheUtil.updatePickListCache(country, language, Arrays.asList(AMLCDDConstants.COUNTRY_OVRRIDE_PICK_LIST_TYPES), pickListLkupVOList);
		return pickListLkupVOLst;
		
	}
	
	@Override
	public Map<String, List<PickListLkUpVO>> getOnLoadPickListLkupData(List<String> pickListTypes){
		logger.info("Inside the Class: CountryRiskOverrideServiceImpl ---> method: getOnLoadPickListLkupData");
		List<PickListLkupEntity> list = riskOverRideDao.getOnLoadPickListLkupData(pickListTypes);
		List<PickListLkUpVO> pickListLkUpVOList = copyPickListLkupEntityToVO(list);
		Map<String, List<PickListLkUpVO>> pickListMap = pickListLkUpVOList.stream().
		        collect(Collectors.groupingBy(p -> p.getPickListType()));
		logger.info("Exits the Class: CountryRiskOverrideServiceImpl ---> method: getOnLoadPickListLkupData");
		return pickListMap;
		
		
	}
	
	private String  getRiskRatingRiskScore(String riskScore){
		String riskRating="";
		if(riskScore!=null){
			riskRating=riskScoreMap.get(riskScore);
		}
		return riskRating;	
	}
	
	@Override
	public String getParameterAssigneeName(String pickListId){
		
		return riskOverRideDao.getParameterAssigneeName(pickListId);
		
	}
	
	
	
}
