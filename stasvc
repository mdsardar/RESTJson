/****************************************************************************
\ *ALL RIGHTS RESERVED.  Not for disclosure outside of Citigroup 
 *and/or its subsidiaries without express prior written authorization.  
  @ Title : SingleTouchApprovalServiceImpl.java
  @ Author    : ms84042
  @ Created On  : Sep 13, 2017
  @ Description : Class For Single Touch Configuration Implementation.
******************************************************************************/

package com.citigroup.amlcdd.useradmin.service;

import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.Comparator;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

import org.apache.commons.collections.CollectionUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.citigroup.amlcdd.audittrail.service.ICddAuditLogService;
import com.citigroup.amlcdd.common.constants.AMLCDDConstants;
import com.citigroup.amlcdd.common.constants.AuditLogActionEventEnum;
import com.citigroup.amlcdd.common.constants.ScreenNameEnum;
import com.citigroup.amlcdd.common.constants.SingleTouchApprovalEnum;
import com.citigroup.amlcdd.entity.SingleTouchApprovalEntity;
import com.citigroup.amlcdd.entity.SingleTouchApprovalStagingEntity;
import com.citigroup.amlcdd.entity.SingleTouchKeys;
import com.citigroup.amlcdd.forms.cdd.vo.CddBaseVO;
import com.citigroup.amlcdd.framework.service.AmlCddCacheUtil;
import com.citigroup.amlcdd.framework.util.CommonUtility;
import com.citigroup.amlcdd.framework.vo.PickListLkUpVO;
import com.citigroup.amlcdd.risk.country.dao.ICountryRiskOverrideDao;
import com.citigroup.amlcdd.useradmin.dao.ISingleTouchApprovalDao;
import com.citigroup.amlcdd.useradmin.vo.STAConfigDetailVO;
import com.citigroup.amlcdd.useradmin.vo.STAConfigStagingVO;
import com.citigroup.amlcdd.workflow.config.WorkflowConstant;
import com.citigroup.amlcdd.workflow.config.WorkflowConstant.ConfigType;
import com.citigroup.amlcdd.workflow.config.WorkflowConstant.UserMntnceUserAction;
import com.citigroup.amlcdd.workflow.interfaces.IUserMaintenanceService;
import com.citigroup.amlcdd.workflow.vo.UserMntnceWorkflowParamVo;
import com.citigroup.amlcdd.workflow.vo.WorkflowResponseUserMntnc;

/*
 *  Class to <SingleTouchApprovalServiceImpl>
 */
@Service
public class SingleTouchApprovalServiceImpl implements ISingleTouchApprovalService {
	private static final Logger logger = LoggerFactory.getLogger(SingleTouchApprovalServiceImpl.class);

	@Autowired
	ISingleTouchApprovalDao iSingleTouchApprovalDao;

	@Autowired
	private IUserMaintenanceService userMaintenanceService;

	@Autowired
	private ICddAuditLogService cddAuditLogSvce;

	@Autowired
	private ICountryRiskOverrideDao commentsDao;

	@Autowired
	private AmlCddCacheUtil amlCddCacheUtil;

	private String userLanguage, userRoleId, userCountry;

	private Map<String, String> allUserMap;

	/*
	 * (non-Javadoc)
	 * 
	 * @see com.citigroup.amlcdd.useradmin.service.ISingleTouchApprovalService#
	 * updateSingleTouchConfigDetails(com.citigroup.amlcdd.useradmin.vo.
	 * STAConfigDetailVO)
	 */
	@Override
	public void updateSingleTouchConfig(STAConfigDetailVO stVO,List<String> systemRoles) throws Exception {
		logger.info("Entry to SingleTouchApprovalServiceImpl  ---> method: updateSingleTouchConfig");
		logger.info("Save Single Touch Approval Config For " + "Country: " + stVO.getCountry() + "ClientType: "
				+ stVO.getClientType() + "RiskRating: " + stVO.getFormRiskRating());
		List<String> statusList = Arrays.asList(AMLCDDConstants.ADD_PENDING, AMLCDDConstants.UPDATE_PENDING,
				AMLCDDConstants.DELETE_PENDING);
		SingleTouchApprovalStagingEntity staStagingEntity = new SingleTouchApprovalStagingEntity();
		stVO.setEmptyForNullValues();
		convertUIToDB(stVO);
		if (CommonUtility.isNotNull(stVO.getCountry())) {
			staStagingEntity.setCountry(stVO.getCountry().trim());
		}

		if (CommonUtility.isNotNull(stVO.getClientType())) {
			staStagingEntity.setClientType(stVO.getClientType().trim());
		}

		if (CommonUtility.isNotNull(stVO.getFormRiskRating())) {
			staStagingEntity.setRiskRating(stVO.getFormRiskRating().trim());
		}

		if (CommonUtility.isNotNull(stVO.getModifiedApproval())) {
			staStagingEntity.setModifiedautoApproval(stVO.getModifiedApproval().trim());
		}

		if (CommonUtility.isNotNull(stVO.getModifiedWorkflowStatus())) {
			if (statusList.contains(stVO.getModifiedWorkflowStatus())
					&& stVO.getModifiedWorkflowStatus().equalsIgnoreCase(AMLCDDConstants.UPDATE_PENDING)) {
				staStagingEntity.setModifiedBy(stVO.getUserId());
				staStagingEntity.setModifiedDt(new Timestamp(System.currentTimeMillis()));
				//staStagingEntity.setCreatedBy(stVO.getCreatedBy().trim());
				staStagingEntity.setCreatedBy(stVO.getUserId());
				staStagingEntity.setCreatedDt(new Timestamp(System.currentTimeMillis()));
			} else if (statusList.contains(stVO.getModifiedWorkflowStatus())
					&& stVO.getModifiedWorkflowStatus().equalsIgnoreCase(AMLCDDConstants.ADD_PENDING)) {
				staStagingEntity.setCreatedBy(stVO.getUserId().trim());
				staStagingEntity.setCreatedDt(new Timestamp(System.currentTimeMillis()));
				staStagingEntity.setModifiedBy(stVO.getUserId().trim());
				staStagingEntity.setModifiedDt(new Timestamp(System.currentTimeMillis()));
			} else if (statusList.contains(stVO.getModifiedWorkflowStatus())
					&& stVO.getModifiedWorkflowStatus().equalsIgnoreCase(AMLCDDConstants.DELETE_PENDING)) {
				//staStagingEntity.setCreatedBy(stVO.getCreatedBy().trim());
				staStagingEntity.setCreatedBy(stVO.getUserId());
				staStagingEntity.setCreatedDt(new Timestamp(System.currentTimeMillis()));
				staStagingEntity.setModifiedBy(stVO.getUserId().trim());
				staStagingEntity.setModifiedDt(new Timestamp(System.currentTimeMillis()));				
			} else {
				staStagingEntity.setModifiedBy(stVO.getModifiedBy().trim());
				staStagingEntity.setModifiedDt(new Timestamp(System.currentTimeMillis()));
			}
			staStagingEntity.setModifiedauthStatus(stVO.getModifiedWorkflowStatus());
		}

		String said = iSingleTouchApprovalDao.saveSingleTouchApprovalDetails(staStagingEntity);
		String complMakerOrKycMakerVal="";
		if(systemRoles !=null && systemRoles.contains(AMLCDDConstants.COMPLMAKER)){
			 complMakerOrKycMakerVal=WorkflowConstant.COMPLMAKER;
        }else if(systemRoles !=null && systemRoles.contains(AMLCDDConstants.KYCMAKER)){
        	complMakerOrKycMakerVal=WorkflowConstant.KYCMAKER;
	    }	
		logger.error("Single Touch Config  Added/Updated To Staging");
		if (CommonUtility.isNotNull(said)) {
			stVO.setStaId(said.trim());
			overToJBPMWorkFlow(stVO, complMakerOrKycMakerVal, ConfigType.WORKFLOW_CONFIG);
		}

		if (CommonUtility.isNotNull(stVO.getComments())) {
			stVO.setCreatedBy(stVO.getUserId());
			stVO.setModifiedBy(stVO.getUserId());
			iSingleTouchApprovalDao.updateComments(stVO);
		}

		if (CommonUtility.isNotNull(stVO.getModifiedWorkflowStatus())) {
			saveAuditLog(stVO, stVO.getCountry(), this.userRoleId);
		}
		logger.info("Exits the Class:SingleTouchApprovalServiceImpl  ---> method: updateSingleTouchConfig");
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see com.citigroup.amlcdd.useradmin.service.ISingleTouchApprovalService#
	 * loadSTADetailsConfig(com.citigroup.amlcdd.useradmin.vo.STAConfigDetailVO)
	 */
	@Override
	public List<STAConfigDetailVO> getCDDMakers() throws Exception {
		logger.info("Entry to SingleTouchApprovalServiceImpl  ---> method: getCDDMakers");
		List<SingleTouchApprovalStagingEntity> staEntityList = null;
		if(CommonUtility.isNotNull(this.userCountry)) {
			staEntityList = iSingleTouchApprovalDao.getInitialMakers(this.userCountry);	
		}		
		List<STAConfigDetailVO> staDetailsList = new ArrayList<STAConfigDetailVO>();
		if (!CollectionUtils.isEmpty(staEntityList)) {
			logger.debug("Found Single Touch Configuration");
			for (SingleTouchApprovalStagingEntity staEntity : staEntityList) {
				STAConfigDetailVO staVO = new STAConfigDetailVO();
				staVO.setCountry(staEntity.getCountry());
				staVO.setClientType(staEntity.getClientType());
				staVO.setFormRiskRating(staEntity.getRiskRating());
				staVO.setModifiedBy(staEntity.getModifiedBy());
				staVO.setModifiedDt(CommonUtility.getFormatedDateWith24hrFmtTimeStamp(staEntity.getModifiedDt()));
				staVO.setCreatedBy(staEntity.getCreatedBy());
				staVO.setCreatedDt(CommonUtility.getFormatedDateWith24hrFmtTimeStamp(staEntity.getCreatedDt()));
				staVO.setModifiedWorkflowStatus(staEntity.getModifiedauthStatus());
				staVO.setModifiedApproval(staEntity.getModifiedautoApproval());
				staVO.setAutoApproval(staEntity.getModifiedautoApproval());
				if (!staEntity.getModifiedauthStatus().equals(AMLCDDConstants.APPROVED)) {
					SingleTouchApprovalEntity stse = iSingleTouchApprovalDao.getBeforeUpdate(staVO);
					if(stse != null && CommonUtility.isNotNull(stse.getAutoApproval()) && !stse.getAuthStatus().equalsIgnoreCase(AMLCDDConstants.INACTIVE)) {
					staVO.setAutoApproval(stse.getAutoApproval());
					}
					/*if(CommonUtility.isNotNull(stse.getCreatedBy())){
						staVO.setCreatedBy(stse.getCreatedBy().trim());
					}
					if(CommonUtility.isNotNull(stse.getModifiedBy())){
						staVO.setModifiedBy(stse.getModifiedBy());
					}
					if(stse.getModifiedDt() != null) {
						staVO.setModifiedDt(CommonUtility.getFormatedDateWith24hrFmtTimeStamp(stse.getModifiedDt()));
					}*/
				} else {
					staVO.setAuthStatus("");
				}
				convertVOToUI(staVO);
				staVO.setEmptyForNullValues();
				staDetailsList.add(staVO);
				staVO.setSTAConfigDetailsList(staDetailsList);
			}

			// Comparator to sort based on Modified Date
			class STAConfigDetailVOComperator implements Comparator<STAConfigDetailVO> {
				@Override
				public int compare(STAConfigDetailVO sTAConfigDetailVO1, STAConfigDetailVO sTAConfigDetailVO2) {
					if (sTAConfigDetailVO1 != null && sTAConfigDetailVO2 != null
							&& CommonUtility.isNotNull(sTAConfigDetailVO1.getModifiedDt())
							&& CommonUtility.isNotNull(sTAConfigDetailVO2.getModifiedDt())) {
						return sTAConfigDetailVO2.getModifiedDt().compareTo(sTAConfigDetailVO1.getModifiedDt());
					}
					return 1;
				}
			}
			Collections.sort(staDetailsList, new STAConfigDetailVOComperator());
		} else {
			logger.debug("No Single Touch Makers Found");
		}
		logger.info("Exits the SingleTouchApprovalServiceImpl  ---> method: getCDDMakers");
		return staDetailsList;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see com.citigroup.amlcdd.useradmin.service.ISingleTouchApprovalService#
	 * getInitialCheckerData()
	 */
	public List<STAConfigStagingVO> getCDDCheckers(String sId) throws Exception {
		logger.info("Entry to SingleTouchApprovalServiceImpl  ---> method: getCDDCheckers");
		List<SingleTouchApprovalStagingEntity> staStageEntityList = iSingleTouchApprovalDao.getCheckersRecords(sId);
		List<STAConfigStagingVO> staStagingList = new ArrayList<STAConfigStagingVO>();

		if (!CollectionUtils.isEmpty(staStageEntityList)) {
			for (SingleTouchApprovalStagingEntity staStageEntity : staStageEntityList) {
				STAConfigStagingVO stageVO = new STAConfigStagingVO();
				STAConfigDetailVO sTAVo = new STAConfigDetailVO();
				stageVO.setSing_touch_id(staStageEntity.getStaId());
				stageVO.setCountry(staStageEntity.getCountry());
				stageVO.setClientType(staStageEntity.getClientType());
				stageVO.setFormRiskRating(staStageEntity.getRiskRating());							
				stageVO.setModifiedBy(staStageEntity.getModifiedBy());
				stageVO.setModifiedDt(CommonUtility.getFormatedDateWith24hrFmtTimeStamp(staStageEntity.getModifiedDt()));
				stageVO.setCreatedBy(staStageEntity.getCreatedBy());
				stageVO.setCreatedDt(CommonUtility.getFormatedDateWith24hrFmtTimeStamp(staStageEntity.getCreatedDt()));
				stageVO.setAuthStatus(staStageEntity.getModifiedauthStatus());
				if (AMLCDDConstants.ADD_PENDING.equalsIgnoreCase(staStageEntity.getModifiedauthStatus())
					|| AMLCDDConstants.DELETE_PENDING.equalsIgnoreCase(staStageEntity.getModifiedauthStatus())) {
					stageVO.setAutoApproval(staStageEntity.getModifiedautoApproval());
					stageVO.setModifiedApproval(CommonUtility.getEmptyString(AMLCDDConstants.EMPTY_STRING));
				} else {
					stageVO.setModifiedApproval(staStageEntity.getModifiedautoApproval());
					BeanUtils.copyProperties(stageVO, sTAVo);
					SingleTouchApprovalEntity stse = iSingleTouchApprovalDao.getBeforeUpdate(sTAVo);
					if (stse != null && CommonUtility.isNotNull(stse.getAutoApproval())
							&& !stse.getAuthStatus().equalsIgnoreCase(AMLCDDConstants.INACTIVE)) {
						stageVO.setAutoApproval(stse.getAutoApproval());
					}
				}
				BeanUtils.copyProperties(stageVO, sTAVo);
				convertVOToUI(sTAVo);
				BeanUtils.copyProperties(sTAVo, stageVO);
				stageVO.setEmptyForNullValues();
				staStagingList.add(stageVO);
				stageVO.setStageVOList(staStagingList);
			}
		} else {
			logger.debug("No STA Checker Found");
		}
		logger.info("Exits SingleTouchApprovalServiceImpl  ---> method: getCDDCheckers");
		return staStagingList;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see com.citigroup.amlcdd.useradmin.service.ISingleTouchApprovalService#
	 * getSTAConfigHistory(com.citigroup.amlcdd.useradmin.vo.STAConfigDetailVO)
	 */
	@Override
	public List<STAConfigDetailVO> getSTAConfigHistory(STAConfigDetailVO stavo) throws Exception {
		logger.info("Entry to SingleTouchApprovalServiceImpl  ---> method: getSTAConfigHistory");
		List<SingleTouchApprovalStagingEntity> lstSTAStagingEntity = iSingleTouchApprovalDao.getHistoryDetails(stavo);
		List<STAConfigDetailVO> listSTAConfigDetailVO = copyToSingleTouchVO(stavo, lstSTAStagingEntity);
		Iterator<STAConfigDetailVO> hstory = listSTAConfigDetailVO.iterator();
		while (hstory.hasNext()) {
			convertVOToUI((STAConfigDetailVO) hstory.next());
		}
		logger.info("Exits SingleTouchApprovalServiceImpl  ---> method: getSTAConfigHistory");
		return listSTAConfigDetailVO;
	}


	/*
	 * 
	 * Method Name: copyToSingleTouchVO 
	 * Description: Method to perform copy to single touch VO	 
	 * @return List<STAConfigDetailVO>	 
	 * @param
	 *
	 */
	private List<STAConfigDetailVO> copyToSingleTouchVO(STAConfigDetailVO configDetailVO,
			List<SingleTouchApprovalStagingEntity> lstSTAEntity) throws Exception {
		logger.info("Entry to SingleTouchApprovalServiceImpl  ---> method: copyToSingleTouchVO");
		List<String> staIdList = new ArrayList<String>();
		List<String> lstmodIdList = new ArrayList<String>();

		List<STAConfigDetailVO> listSTAConfigDetailVO = new ArrayList<STAConfigDetailVO>();
		if (lstSTAEntity != null && !lstSTAEntity.isEmpty()) {
			for (SingleTouchApprovalStagingEntity staStgEntity : lstSTAEntity) {
				STAConfigDetailVO staCfgDetailVO = new STAConfigDetailVO();
				staCfgDetailVO.setCountry(staStgEntity.getCountry() != null ? staStgEntity.getCountry().trim() : "-");
				staCfgDetailVO.setClientType(
						staStgEntity.getClientType() != null ? staStgEntity.getClientType().trim() : "-");
				staCfgDetailVO.setFormRiskRating(
						staStgEntity.getRiskRating() != null ? staStgEntity.getRiskRating().trim() : "-");
				if (CommonUtility.isNotNull(staStgEntity.getModifiedautoApproval().trim())) {
					staCfgDetailVO.setAutoApproval(staStgEntity.getModifiedautoApproval().trim());
				} else {
					staCfgDetailVO.setAutoApproval("");
				}
				if (CommonUtility.isNotNull(staStgEntity.getModifiedBy())) {
					staCfgDetailVO.setModifiedBy(staStgEntity.getModifiedBy().trim());
				} else
					staCfgDetailVO.setModifiedBy("");
				if (CommonUtility.isNotNull(String.valueOf(staStgEntity.getModifiedDt()))) {
					staCfgDetailVO
							.setModifiedDt(CommonUtility.getFormatedDateWith24hrFmtTimeStamp(staStgEntity.getModifiedDt()));
				} 
				if (CommonUtility.isNotNull(String.valueOf(staStgEntity.getCreatedDt()))) {
					staCfgDetailVO
							.setCreatedDt(CommonUtility.getFormatedDateWith24hrFmtTimeStamp(staStgEntity.getCreatedDt()));
				}
				if (CommonUtility.isNotNull(staStgEntity.getCreatedBy())) {
					staCfgDetailVO.setCreatedBy(staStgEntity.getCreatedBy().trim());
				} else
					staCfgDetailVO.setCreatedBy("");
				if (CommonUtility.isNotNull(String.valueOf(staStgEntity.getCreatedDt()))) {
					staCfgDetailVO
							.setModifiedDt(CommonUtility.getFormatedDateWith24hrFmtTimeStamp(staStgEntity.getModifiedDt()));
				}
				if (CommonUtility.isNotNull(staStgEntity.getModifiedauthStatus())) {
					staCfgDetailVO.setModifiedWorkflowStatus(staStgEntity.getModifiedauthStatus().trim());
				} else
					staCfgDetailVO.setModifiedWorkflowStatus("");
				if (CommonUtility.isNotNull(staStgEntity.getStaId())) {
					staCfgDetailVO.setStaId(staStgEntity.getStaId());
				} else
					staCfgDetailVO.setStaId("");

				staIdList.add(staStgEntity.getStaId());
				lstmodIdList.add(staStgEntity.getModifiedBy());
				listSTAConfigDetailVO.add(staCfgDetailVO);
			}

			if (!staIdList.isEmpty() && staIdList.size() > 0) {
				Map<String, String> checkersCommentsMap = commentsDao.getKYCComments(staIdList,
						AMLCDDConstants.SINGLE_TOUCH_APPROVAL, lstmodIdList);

				for (STAConfigDetailVO STAConfigDetailVO : listSTAConfigDetailVO) {
					String commonComments = checkersCommentsMap.entrySet().stream()
							.filter(map -> STAConfigDetailVO.getStaId().equals(map.getKey())).map(map -> map.getValue())
							.collect(Collectors.joining());
					if (CommonUtility.isNotNull(String.valueOf(commonComments))) {
						STAConfigDetailVO.setComments(commonComments);
					} else
						STAConfigDetailVO.setComments("");
				}
			}
		}
		logger.info("Exits SingleTouchApprovalServiceImpl  ---> method: copyToSingleTouchVO");
		return listSTAConfigDetailVO;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see com.citigroup.amlcdd.useradmin.service.ISingleTouchApprovalService#
	 * getUpdatedRecord(com.citigroup.amlcdd.useradmin.vo.STAConfigDetailVO)
	 */
	@Override
	public STAConfigDetailVO getUpdatedRecord(STAConfigDetailVO staVO) throws Exception {
		logger.info("Entry SingleTouchApprovalServiceImpl  ---> method: getUpdatedRecord");
		STAConfigDetailVO staConfigVo = new STAConfigDetailVO();
		String priorAuthStatus = staVO.getAuthStatus();
		SingleTouchApprovalStagingEntity sTAStagingEntity = iSingleTouchApprovalDao.getUpdatedRecord(staVO);
		if (null != sTAStagingEntity) {
			staConfigVo.setAuthStatus(priorAuthStatus);
			
			if(CommonUtility.isNotNull(sTAStagingEntity.getCountry())){
				staConfigVo.setCountry(sTAStagingEntity.getCountry());
			}
			if (CommonUtility.isNotNull(sTAStagingEntity.getModifiedauthStatus())) {
				staConfigVo.setModifiedWorkflowStatus(sTAStagingEntity.getModifiedauthStatus().trim());
			}
			if (CommonUtility.isNotNull(sTAStagingEntity.getModifiedautoApproval())) {
				staConfigVo.setModifiedApproval(sTAStagingEntity.getModifiedautoApproval().trim());
			}
			if (CommonUtility.isNotNull(sTAStagingEntity.getCreatedBy())) {
				staConfigVo.setCreatedBy(sTAStagingEntity.getCreatedBy().trim());
			}
			if (CommonUtility.isNotNull(sTAStagingEntity.getModifiedBy())) {
				staConfigVo.setModifiedBy(sTAStagingEntity.getModifiedBy());
			}
			if (sTAStagingEntity.getModifiedDt() != null) {
				staConfigVo.setModifiedDt(CommonUtility.getFormatedDateWith24hrFmtTimeStamp(sTAStagingEntity.getModifiedDt()));
			}
			staConfigVo.setEmptyForNullValues();
			convertVOToUI(staConfigVo);
		}
		logger.info("Exits SingleTouchApprovalServiceImpl ---> method: getUpdatedRecord");
		return staConfigVo;
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see com.citigroup.amlcdd.useradmin.service.ISingleTouchApprovalService#
	 * updateChecker(java.util.List)
	 */
	@Override
	public List<STAConfigDetailVO> updateChecker(List<STAConfigDetailVO> staVOList, String userName,List<String> systemRoles) throws Exception {
		logger.info("Entry to SingleTouchApprovalServiceImpl ---> method: updateChecker");
		List<SingleTouchApprovalStagingEntity> lstSTAStgEntity = new ArrayList<>();
		List<String> approvedList = Arrays.asList(AMLCDDConstants.ADD_APPROVED, AMLCDDConstants.UPDATE_APPROVED,
				AMLCDDConstants.DELETE_APPROVED);
		List<String> rejectedList = Arrays.asList(AMLCDDConstants.ADD_REJECTED, AMLCDDConstants.UPDATE_REJECTED,
				AMLCDDConstants.DELETE_REJECTED);
		Date mkrCreateDt=null;String mktCreatedBy=null;
		for (STAConfigDetailVO staCfgVO : staVOList) {
			staCfgVO.setEmptyForNullValues();
			List<SingleTouchApprovalStagingEntity> sTAStgEntityList = addToStaging(staCfgVO);
			for (SingleTouchApprovalStagingEntity singleTouchApprovalStagingEntity : sTAStgEntityList) {
				singleTouchApprovalStagingEntity.setModifiedauthStatus(staCfgVO.getModifiedWorkflowStatus());
				singleTouchApprovalStagingEntity.setModifiedBy(staCfgVO.getModifiedBy());
				mkrCreateDt = CommonUtility.parseDateWithTimeStamp(staCfgVO.getCreatedDt());
				mktCreatedBy = staCfgVO.getCreatedBy().trim();

				/*if ((staCfgVO.getModifiedWorkflowStatus().equals(AMLCDDConstants.DELETE_APPROVED))
						|| (staCfgVO.getModifiedWorkflowStatus().equals(AMLCDDConstants.DELETE_REJECTED))) {
					singleTouchApprovalStagingEntity.setModifiedautoApproval(staCfgVO.getModifiedApproval());
					singleTouchApprovalStagingEntity.setModifiedDt(new Date());
					singleTouchApprovalStagingEntity.setCreatedBy(staCfgVO.getCreatedBy().trim());
					singleTouchApprovalStagingEntity.setModifiedBy(staCfgVO.getModifiedBy().trim());
				} else if ((staCfgVO.getModifiedWorkflowStatus().equals(AMLCDDConstants.ADD_APPROVED))
						|| (staCfgVO.getModifiedWorkflowStatus().equals(AMLCDDConstants.ADD_REJECTED))) {
					singleTouchApprovalStagingEntity.setModifiedautoApproval(staCfgVO.getModifiedApproval());
					singleTouchApprovalStagingEntity.setModifiedDt(new Date());
					singleTouchApprovalStagingEntity.setCreatedBy(staCfgVO.getCreatedBy().trim());
					singleTouchApprovalStagingEntity.setModifiedBy(staCfgVO.getModifiedBy().trim());
				} else if ((staCfgVO.getModifiedWorkflowStatus().equals(AMLCDDConstants.UPDATE_APPROVED))
						|| (staCfgVO.getModifiedWorkflowStatus().equals(AMLCDDConstants.UPDATE_REJECTED))) {
					singleTouchApprovalStagingEntity.setModifiedautoApproval(staCfgVO.getModifiedApproval());
					singleTouchApprovalStagingEntity.setModifiedDt(new Date());
					singleTouchApprovalStagingEntity.setCreatedBy(staCfgVO.getCreatedBy().trim());
					singleTouchApprovalStagingEntity.setModifiedBy(staCfgVO.getModifiedBy().trim());
				}*/
				if(CommonUtility.isNotNull(staCfgVO.getModifiedApproval())){
					singleTouchApprovalStagingEntity.setModifiedautoApproval(staCfgVO.getModifiedApproval());	
				}
				else {
					singleTouchApprovalStagingEntity.setModifiedautoApproval(staCfgVO.getAutoApproval());
				}
				
				singleTouchApprovalStagingEntity.setCreatedBy(userName);
				singleTouchApprovalStagingEntity.setCreatedDt(new Date());
				singleTouchApprovalStagingEntity.setModifiedBy(userName);
				singleTouchApprovalStagingEntity.setModifiedDt(new Date());
				lstSTAStgEntity.add(singleTouchApprovalStagingEntity);
			}
		}
		;
		String sidStage = iSingleTouchApprovalDao.updateSingleTouchConfig(lstSTAStgEntity);
		List<SingleTouchApprovalEntity> lstSingleTouchApprovalEntity = new ArrayList<>();
		for (SingleTouchApprovalStagingEntity sngeTchLstLkupStagingEntity : lstSTAStgEntity) {
			SingleTouchApprovalEntity staEnty = new SingleTouchApprovalEntity();
			SingleTouchKeys hungKey = new SingleTouchKeys();
			/*
			 * BeanUtils.copyProperties(sngeTchLstLkupStagingEntity,
			 * singleTouchApprovalEntity);
			 */
			staEnty.setStaKey(hungKey);
			staEnty.getStaKey().setCountry(sngeTchLstLkupStagingEntity.getCountry().trim());
			staEnty.getStaKey().setClientType(sngeTchLstLkupStagingEntity.getClientType().trim());
			staEnty.getStaKey().setRiskRating(sngeTchLstLkupStagingEntity.getRiskRating().trim());
			staEnty.setAutoApproval(sngeTchLstLkupStagingEntity.getModifiedautoApproval().trim());
			staEnty.setModifiedBy(sngeTchLstLkupStagingEntity.getModifiedBy().trim());
			staEnty.setModifiedDt(new Timestamp(System.currentTimeMillis()));
			staEnty.setAuthStatus(sngeTchLstLkupStagingEntity.getModifiedauthStatus().trim());
			staEnty.setStaId(sngeTchLstLkupStagingEntity.getStaId());
			/*if (sngeTchLstLkupStagingEntity.getCreatedDt() != null) {
				staEnty.setCreatedDt(sngeTchLstLkupStagingEntity.getCreatedDt());
			} else
				staEnty.setCreatedDt(new Timestamp(System.currentTimeMillis()));
			if (sngeTchLstLkupStagingEntity.getCreatedBy() != null) {
				staEnty.setCreatedBy(sngeTchLstLkupStagingEntity.getCreatedBy());
			} else {
				staEnty.setCreatedBy("-");
			}*/
			if (mkrCreateDt != null) {
				staEnty.setCreatedDt(mkrCreateDt);
			} else
				staEnty.setCreatedDt(new Timestamp(System.currentTimeMillis()));
			if (mktCreatedBy != null) {
				staEnty.setCreatedBy(mktCreatedBy);
			} else {
				staEnty.setCreatedBy("-");
			}
			lstSingleTouchApprovalEntity.add(staEnty);
		}
		List<SingleTouchApprovalEntity> staEntityLst = iSingleTouchApprovalDao
				.updateChecker(lstSingleTouchApprovalEntity);
		List<STAConfigDetailVO> lstSngTuchListLkupVO = copySTLkupEntityToVO(staEntityLst);
		
		for (STAConfigDetailVO staLkUpVO : lstSngTuchListLkupVO) {
			if (AMLCDDConstants.APPROVED.equals(staLkUpVO.getModifiedWorkflowStatus())) {
				lstSngTuchListLkupVO.add(staLkUpVO);
			} else {
				if ((AMLCDDConstants.UPDATE_APPROVED).equals(staLkUpVO.getModifiedWorkflowStatus())
						|| (AMLCDDConstants.INACTIVE).equals(staLkUpVO.getModifiedWorkflowStatus())
						|| (AMLCDDConstants.DELETE_APPROVED).equals(staLkUpVO.getModifiedWorkflowStatus())) {
					lstSngTuchListLkupVO.add(staLkUpVO);
				}
			}
		}
		 String complCheckerOrKycCheckerVal="";
		 if(systemRoles !=null && systemRoles.contains(AMLCDDConstants.COMPLCHECKER)){
			 complCheckerOrKycCheckerVal=WorkflowConstant.COMPLCHECKER;
         }else if(systemRoles !=null && systemRoles.contains(AMLCDDConstants.KYCCHECKER)){
        	 complCheckerOrKycCheckerVal=WorkflowConstant.KYCCHECKER;
	     }	
		// Call To Work flow according to Logged In User Role   
		for (STAConfigDetailVO singleTouchCfgVO : staVOList) {

			if (approvedList.contains(singleTouchCfgVO.getModifiedWorkflowStatus().trim())) {
				overToUserAction(singleTouchCfgVO, complCheckerOrKycCheckerVal, UserMntnceUserAction.APPROVE,
						userName);
				singleTouchCfgVO.setStaId(sidStage);
				iSingleTouchApprovalDao.updateComments(singleTouchCfgVO);
				saveAuditLog(singleTouchCfgVO, singleTouchCfgVO.getCountry(), this.userRoleId);
			} else if (rejectedList.contains(singleTouchCfgVO.getModifiedWorkflowStatus().trim())) {
				overToUserAction(singleTouchCfgVO, complCheckerOrKycCheckerVal, UserMntnceUserAction.REJECT,
						userName);
				singleTouchCfgVO.setStaId(sidStage);
				iSingleTouchApprovalDao.updateComments(singleTouchCfgVO);
				saveAuditLog(singleTouchCfgVO, singleTouchCfgVO.getCountry(), this.userRoleId);
			}
		}		
		logger.info("Exits SingleTouchApprovalServiceImpl ---> method: UpdateChecker");
		return lstSngTuchListLkupVO;
	}

	/*
	 * Method Name: triggerWorkFlow 
	 * Description: Method to perform <Trigger Workflow>
	 * @return void
	 * @param STAConfigDetailVO, System Role , Config Type
	 *
	 */
	public void overToJBPMWorkFlow(STAConfigDetailVO singleTouchConfigVO, String systemRole,
			WorkflowConstant.ConfigType configType) throws Exception{
		logger.info(
				"Entry the Class:SingleTouchApprovalServiceImpl  ---> initiating JBMP workflow starts in initiateJBPMWorkflow method");
		WorkflowResponseUserMntnc response = null;
		UserMntnceWorkflowParamVo userMntnceWorkflowParamVo = new UserMntnceWorkflowParamVo();
		userMntnceWorkflowParamVo.setUserId(singleTouchConfigVO.getUserId());
		if (null != singleTouchConfigVO.getStaId()) {
			userMntnceWorkflowParamVo.setRequestNbr(singleTouchConfigVO.getStaId());
		}
		// userMntnceWorkflowParamVo.setAssignee(singleTouchConfigVO.getCreatedBy());
		userMntnceWorkflowParamVo.setSystemRole(systemRole);
		userMntnceWorkflowParamVo.setWorkItemType(WorkflowConstant.ConfigType.WORKFLOW_CONFIG);
		response = userMaintenanceService.startWorkflow(userMntnceWorkflowParamVo, configType);
	}
	
	/**
	 * 
	 * @param sTVO
	 * @param systemRole
	 * @param userAction
	 * @param userName
	 * @throws Exception
	 */
	public void overToUserAction(STAConfigDetailVO sTVO, String systemRole, UserMntnceUserAction userAction,
			String userName) throws Exception {
		logger.info("Entry the Class:SingleTouchApprovalServiceImpl  ---> method: overToUserAction");
		WorkflowResponseUserMntnc response = null;
		UserMntnceWorkflowParamVo userMntnceWorkflowParamVo = new UserMntnceWorkflowParamVo();
		userMntnceWorkflowParamVo.setUserId(userName);
		String modAuthStatus = sTVO.getModifiedWorkflowStatus().trim();
		String modAutoApproval = sTVO.getModifiedApproval().trim();
		String autoApproval = sTVO.getAutoApproval().trim();
		String reqNum = sTVO.getStaId().trim();
		if (CommonUtility.isNotNull(modAuthStatus) && (CommonUtility.isNotNull(modAutoApproval)
		|| (CommonUtility.isNotNull(autoApproval))) && CommonUtility.isNotNull(reqNum))
		userMntnceWorkflowParamVo.setRequestNbr(reqNum);
		userMntnceWorkflowParamVo.setSystemRole(systemRole);
		userMntnceWorkflowParamVo.setWorkItemType(ConfigType.WORKFLOW_CONFIG);
		userMaintenanceService.doUserAction(userMntnceWorkflowParamVo, userAction);
		logger.info("Exits the Class:SingleTouchApprovalServiceImpl  ---> method: overToUserAction");
	}

	/**
	 * 
	 * Method Name: saveAuditLog 
	 * Description: Method to Save Audit Log	  
	 * @return void	  
	 * @param STAConfigDetailVO, Country
	 *
	 */
	private void saveAuditLog(STAConfigDetailVO staVO, String countryCode, String roleId) throws Exception {
		logger.info("Entry the Class: SingleTouchApprovalServiceImpl ---> method: saveAuditLog");
		CddBaseVO cddbaseVo = new CddBaseVO();
		cddbaseVo.setFormName(ScreenNameEnum.WORKFLOW_CONFIG_RULES);
		cddbaseVo.setActionDoneByUser(staVO.getCreatedBy());
		cddbaseVo.setActionDoneByRole(roleId);
		cddbaseVo.setActionEvent(AuditLogActionEventEnum.SINGLETOUCH_CONFIG_RULES_SUBMIT);
		if (CommonUtility.isNotNull(countryCode)) {
			cddbaseVo.setCountry(countryCode.trim());
		} else {
			cddbaseVo.setCountry(this.userCountry);
		}
		cddAuditLogSvce.saveCddAuditLog(cddbaseVo);
		logger.info("Exits the Class: SingleTouchApprovalServiceImpl ---> method: saveAuditLog");
	}

	/*
	 * 
	 * Method Name: copyPickListLkupEntityToVO 
	 * Description: Method to perform Copy From Entity To VO 
	 * @return List<STAConfigDetailVO> 
	 * @param List<SingleTouchApprovalEntity>
	 *
	 */
	private List<STAConfigDetailVO> copySTLkupEntityToVO(List<SingleTouchApprovalEntity> pickListLkupEntityLst)
			throws Exception {
		logger.info("Entry the Class:SingleTouchApprovalServiceImpl  ---> method: copySTLkupEntityToVO");
		List<STAConfigDetailVO> singleListDetails = null;
		singleListDetails = new ArrayList<STAConfigDetailVO>();
		for (SingleTouchApprovalEntity staLstLkupEntity : pickListLkupEntityLst) {
			STAConfigDetailVO staListLkUpVO = new STAConfigDetailVO();
			staListLkUpVO.setCountry(staLstLkupEntity.getStaKey().getCountry());
			staListLkUpVO.setClientType(staLstLkupEntity.getStaKey().getClientType());
			staListLkUpVO.setFormRiskRating(staLstLkupEntity.getStaKey().getRiskRating());
			staListLkUpVO.setAutoApproval(staLstLkupEntity.getAutoApproval());
			staListLkUpVO.setAuthStatus(staLstLkupEntity.getAuthStatus());
			staListLkUpVO.setCreatedDt(CommonUtility.getFormatedDateWith24hrFmtTimeStamp(staLstLkupEntity.getCreatedDt()));
			staListLkUpVO.setCreatedBy(staLstLkupEntity.getCreatedBy());
			staListLkUpVO.setModifiedDt(CommonUtility.getFormatedDateWith24hrFmtTimeStamp(staLstLkupEntity.getModifiedDt()));
			staListLkUpVO.setModifiedBy(staLstLkupEntity.getModifiedBy());
			singleListDetails.add(staListLkUpVO);
		}
		logger.info("Exits the Class:SingleTouchApprovalServiceImpl  ---> method: copySTLkupEntityToVO");
		return singleListDetails;
	}

	/*
	 * 
	 * Method Name: addToStaging 
	 * Description: Method to prepare for Staging 
	 * @return List<SingleTouchApprovalStagingEntity>	 
	 * @param STAConfigDetailVO
	 *
	 */
	private List<SingleTouchApprovalStagingEntity> addToStaging(STAConfigDetailVO configDetailVO) throws Exception {
		logger.info("Entry the Class:SingleTouchApprovalServiceImpl  ---> method: addToStaging");
		List<SingleTouchApprovalStagingEntity> staStgEntityList = new ArrayList<SingleTouchApprovalStagingEntity>();
		if (null != configDetailVO) {
			SingleTouchApprovalStagingEntity singleTouchApprovalStagingEntity = new SingleTouchApprovalStagingEntity();
			convertUIToDB(configDetailVO);
			singleTouchApprovalStagingEntity.setCountry(configDetailVO.getCountry().trim());
			singleTouchApprovalStagingEntity.setClientType(configDetailVO.getClientType().trim());
			singleTouchApprovalStagingEntity.setRiskRating(configDetailVO.getFormRiskRating().trim());
			singleTouchApprovalStagingEntity.setModifiedautoApproval(configDetailVO.getModifiedApproval().trim());
			singleTouchApprovalStagingEntity.setModifiedauthStatus(configDetailVO.getModifiedWorkflowStatus().trim());
			staStgEntityList.add(singleTouchApprovalStagingEntity);
		}
		for (SingleTouchApprovalStagingEntity staStgEntity : staStgEntityList) {
			List<String> addStatusList = Arrays.asList(AMLCDDConstants.ADD_PENDING, AMLCDDConstants.ADD_APPROVED,
					AMLCDDConstants.ADD_REJECTED);
			if (addStatusList.contains(configDetailVO.getAuthStatus())) {
				staStgEntity.setCreatedDt(new Timestamp(System.currentTimeMillis()));
				staStgEntity.setCreatedBy(configDetailVO.getCreatedBy());
				staStgEntity.setModifiedDt(new Timestamp(System.currentTimeMillis()));
				staStgEntity.setModifiedBy(configDetailVO.getModifiedBy().trim());
			} else {
				staStgEntity.setCreatedDt(new Timestamp(System.currentTimeMillis()));
				staStgEntity.setCreatedBy(configDetailVO.getCreatedBy().trim());
				staStgEntity.setModifiedDt(new Timestamp(System.currentTimeMillis()));
				staStgEntity.setModifiedBy(configDetailVO.getModifiedBy().trim());
			}
		}
		logger.info("Exits the Class:SingleTouchApprovalServiceImpl ---> method: addToStaging");
		return staStgEntityList;
	}
	
	/**
	 * 
	 * Method Name: convertUIToDB
	 * Description: Method to perform <Details>
	 * @return STAConfigDetailVO
	 * @param 
	 *
	 */
	private STAConfigDetailVO convertUIToDB(STAConfigDetailVO staVO) {
		logger.info("Entry the Class:SingleTouchApprovalServiceImpl  ---> method: convertUIToDB");
		List<PickListLkUpVO> staCountry = amlCddCacheUtil.getPickListData(this.userCountry, this.userLanguage,
				AMLCDDConstants.ISO_COUNTRY_LKUP);		
		
		List<PickListLkUpVO> staRiskRate = amlCddCacheUtil.getPickListData(this.userCountry, this.userLanguage,
				AMLCDDConstants.PICK_RISK_RATING);
		
		List<PickListLkUpVO> staAuto = amlCddCacheUtil.getPickListData(this.userCountry, this.userLanguage, AMLCDDConstants.PICK_YE_NO);

		List<PickListLkUpVO> staClientType = amlCddCacheUtil.getPickListData(this.userCountry, this.userLanguage,
				AMLCDDConstants.CDD_CLIENT_TYPE);

		List<String> statusList = Arrays.asList(AMLCDDConstants.ADD_PENDING, AMLCDDConstants.UPDATE_PENDING,
				AMLCDDConstants.DELETE_PENDING);
		
		if (staCountry != null && !staCountry.isEmpty() && staCountry.size() > 0) {
			PickListLkUpVO pickListCountryVO = staCountry.stream()
					.filter(value -> staVO.getCountry() != null && staVO.getCountry().equals(value.getPickListDesc()))
					.findAny().orElse(null);

			if (pickListCountryVO != null) {
				String countryDB = pickListCountryVO.getCode();
				if (CommonUtility.isNotNull(countryDB)) {
					if (this.userCountry.equalsIgnoreCase(countryDB))
						staVO.setCountry(countryDB);
					else
						staVO.setCountry(this.userCountry);
					logger.debug("Country Code For STA " + staVO.getCountry());
				}
			}
		}

		if (staRiskRate != null && !staRiskRate.isEmpty() && staRiskRate.size() > 0) {
			PickListLkUpVO pickListRiskRatingVO = staRiskRate.stream().filter(value -> staVO.getFormRiskRating() != null
					&& staVO.getFormRiskRating().equals(value.getPickListDesc())).findAny().orElse(null);

			if (pickListRiskRatingVO != null) {
				String riskRateDB = pickListRiskRatingVO.getCode();
				if (CommonUtility.isNotNull(riskRateDB)) {
					staVO.setFormRiskRating(riskRateDB);
					logger.debug("Form Risk Rating Code For STA " + staVO.getFormRiskRating());
				}
			}
		}

		if (staAuto != null && !staAuto.isEmpty() && staAuto.size() > 0) {
			PickListLkUpVO pickListAutoApproveVO = staAuto.stream()
					.filter(value -> staVO.getAutoApproval() != null && staVO.getAutoApproval().equals(value.getPickListDesc()))
					.findAny()
					.orElse(null);

			PickListLkUpVO pickListModifiedAuto = staAuto.stream()
					.filter(value -> staVO.getModifiedApproval() != null && staVO.getModifiedApproval().equals(value.getPickListDesc()))
						.findAny()
						.orElse(null);

			if (pickListAutoApproveVO != null) {
				String autoApprovalDB = String.valueOf(pickListAutoApproveVO.getPickListDesc().charAt(0));
				if (CommonUtility.isNotNull(autoApprovalDB)) {
					staVO.setAutoApproval(autoApprovalDB);
					logger.debug("Auto Approval Status Code For STA " + staVO.getAutoApproval());
				}
			}

			if (pickListModifiedAuto != null) {
				String autoModApprovalDB = String.valueOf(pickListModifiedAuto.getPickListDesc().charAt(0));
				if (CommonUtility.isNotNull(autoModApprovalDB)) {
					staVO.setModifiedApproval(autoModApprovalDB);
					logger.debug("Modified Auto Approval Status Code For STA " + staVO.getModifiedApproval());
				}
			}
		}

		if (staClientType != null && !staClientType.isEmpty() && staClientType.size() > 0) {
			PickListLkUpVO pickListClientTypeVO = staClientType.stream()
					.filter(value -> staVO.getClientType() != null && staVO.getClientType().equals(value.getPickListDesc()))
					.findAny().orElse(null);
			if (pickListClientTypeVO != null) {
				String clientTypeDB = pickListClientTypeVO.getCode();
				if (CommonUtility.isNotNull(clientTypeDB)) {
					staVO.setClientType(clientTypeDB);
					logger.debug("Client Type For STA " + staVO.getClientType());
				}
			}
		}
		
		Map<String, String> userMap = getAllUsers();

		if (userMap != null && userMap.size() > 0 && !userMap.isEmpty()) {
			String createdUserIDDB = userMap.entrySet().stream()
					.filter(map -> staVO.getCreatedBy().equals(map.getValue())).map(map -> map.getKey())
					.collect(Collectors.joining());

			String modifiedUserIDDB = userMap.entrySet().stream()
					.filter(map -> staVO.getModifiedBy().equals(map.getValue())).map(map -> map.getKey())
					.collect(Collectors.joining());

			if (statusList.contains(staVO.getAuthStatus())) {
				staVO.setCreatedBy(createdUserIDDB);
				staVO.setModifiedBy(modifiedUserIDDB);
			} else {
				staVO.setCreatedBy(createdUserIDDB);
			}
		}	
		logger.info("Exits the Class:SingleTouchApprovalServiceImpl  ---> method: convertUIToDB");
		return staVO;
	}
	
	/**
	 * Method to get Pick List Data For Both STA Makers and Checkers 
	 * @param  staVO
	 * @return STAConfigDetailVO
	 */
	private STAConfigDetailVO convertVOToUI(STAConfigDetailVO staVO) {	
		logger.info("Enter the Class:SingleTouchApprovalServiceImpl  ---> method: convertVOToUI");
		
		List<PickListLkUpVO> staCountry = amlCddCacheUtil.getPickListData(this.userCountry, this.userLanguage, AMLCDDConstants.ISO_COUNTRY_LKUP);

		List<PickListLkUpVO> staRiskRate = amlCddCacheUtil.getPickListData(this.userCountry, this.userLanguage, AMLCDDConstants.PICK_RISK_RATING);

		List<PickListLkUpVO> staAuto = amlCddCacheUtil.getPickListData(this.userCountry, this.userLanguage, AMLCDDConstants.PICK_YE_NO);

		List<PickListLkUpVO> staClientType = amlCddCacheUtil.getPickListData(this.userCountry, this.userLanguage, AMLCDDConstants.CDD_CLIENT_TYPE);
		
		SingleTouchApprovalEnum fromString  = SingleTouchApprovalEnum.valueOf(staVO.getCountry());
		if (staCountry != null && !staCountry.isEmpty() && staCountry.size() > 0) {
			PickListLkUpVO pickListCountryVO = staCountry.stream()
					.filter(value -> CommonUtility.isNotNull(fromString.getValue()) && fromString.getValue().equals(value.getCode()))
					.findAny()
					.orElse(null);
			if (pickListCountryVO != null) {
				String countryUI = pickListCountryVO.getPickListDesc();
				if (CommonUtility.isNotNull(countryUI)) {
					staVO.setCountry(pickListCountryVO.getPickListDesc());
					logger.debug("Real Country For STA " + staVO.getCountry());
				}
			}
		}

		if (staRiskRate != null && !staRiskRate.isEmpty() && staRiskRate.size() > 0) {
			PickListLkUpVO pickListRiskRatingVO = staRiskRate.stream()
					.filter(value -> staVO.getFormRiskRating() != null && staVO.getFormRiskRating().equals(value.getCode()))
					.findAny()
					.orElse(null);
			if (pickListRiskRatingVO != null) {
				String riskRateUI = pickListRiskRatingVO.getPickListDesc();
				if (CommonUtility.isNotNull(riskRateUI)) {
					staVO.setFormRiskRating(pickListRiskRatingVO.getPickListDesc());
					logger.debug("Risk Rating For STA " + staVO.getFormRiskRating());
				}
			}
		}

		if (staAuto != null && !staAuto.isEmpty() && staAuto.size() > 0) {
			PickListLkUpVO pickListAutoApproveVO = staAuto.stream()
					.filter(value -> staVO.getAutoApproval() != null && staVO.getAutoApproval().equals(String.valueOf(value.getPickListDesc().charAt(0))))
					.findAny()
					.orElse(null);

			PickListLkUpVO pickListModifiedAuto = staAuto.stream()
					.filter(value -> staVO.getModifiedApproval() != null && staVO.getModifiedApproval().equals(String.valueOf(value.getPickListDesc().charAt(0))))
						.findAny()
						.orElse(null);

			if (pickListAutoApproveVO != null) {
				String autoApproval = pickListAutoApproveVO.getPickListDesc();
				if (CommonUtility.isNotNull(autoApproval)) {
					staVO.setAutoApproval(pickListAutoApproveVO.getPickListDesc());
				}
			}

			if (pickListModifiedAuto != null) {
				String autoModApproval = pickListModifiedAuto.getPickListDesc();
				if (CommonUtility.isNotNull(autoModApproval)) {
					staVO.setModifiedApproval(autoModApproval);
					logger.debug("Auto Approval Status For STA " + staVO.getModifiedApproval());
				}
			}
		}

		if (staClientType != null && !staClientType.isEmpty() && staClientType.size() > 0) {
			PickListLkUpVO pickListClientTypeVO = staClientType.stream()
					.filter(value -> staVO.getClientType() != null && staVO.getClientType().equals(value.getCode()))
					.findAny().orElse(null);
			if (pickListClientTypeVO != null) {
				staVO.setClientType(pickListClientTypeVO.getPickListDesc());
				logger.debug("Client Type For STA " + staVO.getClientType());
			}
		}
		
		Map<String, String> userMap = getAllUsers();

		if (userMap != null && userMap.size() > 0 && !userMap.isEmpty()) {
			String createdUserID = userMap.entrySet().stream().filter(map -> staVO.getCreatedBy().equals(map.getKey()))
					.map(map -> map.getValue()).collect(Collectors.joining());

			String modifiedUserID = userMap.entrySet().stream()
					.filter(map -> staVO.getModifiedBy().equals(map.getKey())).map(map -> map.getValue())
					.collect(Collectors.joining());

			staVO.setCreatedBy(createdUserID);
			staVO.setModifiedBy(modifiedUserID);
			logger.debug("Created User Id For STA" + staVO.getCreatedBy());
			logger.debug("Modified User Id For STA" + staVO.getModifiedBy());
		}
		logger.info("Exits the Class:SingleTouchApprovalServiceImpl  ---> method: convertVOToUI");
		return staVO;
	}

	
	/**
	 * Method Name: getUserNameById
	 * Description: Method to perform <Details>
	 * @return String
	 * @param 
	 * 
	 */
	@Override
	public Map<String, String> getAllUsers() {
		if (allUserMap == null) {
			allUserMap = commentsDao.getAllUsers();
		}
		return allUserMap;
	}
	
	/**
	 * Method Name: getUserNameById
	 * Description: Method to perform <Details>
	 * @return String
	 * @param 
	 * 
	 */
	public void setUserContext(String country, String userLanguage, String userRole) throws Exception {
		this.userCountry = country;
		this.userLanguage = userLanguage;
		this.userRoleId = userRole;
	}
	
	/**
	 * Method Name: getStaCountry
	 * Description: Method to perform <getting UserCountry>
	 * @return String
	 * @param 
	 * 
	 */
	@Override
	public String getStaCountry(String countryCode) throws Exception {
		List<PickListLkUpVO> staCountry = amlCddCacheUtil.getPickListData(this.userCountry, this.userLanguage,	AMLCDDConstants.ISO_COUNTRY_LKUP);
		Map<String, String> countryDescMap = new HashMap<String, String>();
		String countryDesc = "";	
		SingleTouchApprovalEnum fromString  = SingleTouchApprovalEnum.valueOf(countryCode);
		if (staCountry != null && !staCountry.isEmpty() && staCountry.size() > 0) {
			PickListLkUpVO pickListCountryVO = staCountry.stream()
					.filter(value -> CommonUtility.isNotNull(fromString.getValue()) && fromString.getValue().equals(value.getCode()))
					.findAny().orElse(null);

			if (pickListCountryVO != null) {
				countryDesc = pickListCountryVO.getPickListDesc();
				if (CommonUtility.isNotNull(countryDesc)) {
					countryDescMap.put(fromString.getValue(), countryDesc);
				}
			}
		}
		return countryDesc;
	}
	@Override
	public String getParameterAssigneeName(String pickListId){
		
		return iSingleTouchApprovalDao.getParameterAssigneeName(pickListId);
		
	}
}
